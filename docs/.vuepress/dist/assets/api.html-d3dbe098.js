import{_ as e,r as t,o,c as p,b as s,d as a,e as c,a as l}from"./app-2d0ae98a.js";const i={},u=s("h1",{id:"c-api",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#c-api","aria-hidden":"true"},"#"),a(" C API")],-1),r=s("code",null,"buzz_api",-1),d={href:"https://github.com/buzz-language/buzz/tree/main/src/lib",target:"_blank",rel:"noopener noreferrer"},k=l(`<p><strong>Note:</strong> This API is unstable and will be subject to change in the future.</p><h2 id="value" tabindex="-1"><a class="header-anchor" href="#value" aria-hidden="true">#</a> Value</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">const</span> <span class="token class-name">Value</span> <span class="token operator">=</span> <span class="token keyword">packed</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    val<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">u64</span></span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><p>A buzz value NaN boxed in a <code>f64</code>.</p><h3 id="null" tabindex="-1"><a class="header-anchor" href="#null" aria-hidden="true">#</a> Null</h3><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">const</span> Null
</code></pre></div><p>Buzz constant for the <code>null</code> value</p><h3 id="void" tabindex="-1"><a class="header-anchor" href="#void" aria-hidden="true">#</a> Void</h3><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">const</span> Void
</code></pre></div><p>Buzz constant for the <code>void</code> value</p><h3 id="true" tabindex="-1"><a class="header-anchor" href="#true" aria-hidden="true">#</a> True</h3><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">const</span> True
</code></pre></div><p>Buzz constant for the <code>true</code> value</p><h3 id="false" tabindex="-1"><a class="header-anchor" href="#false" aria-hidden="true">#</a> False</h3><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">const</span> False
</code></pre></div><p>Buzz constant for the <code>false</code> value</p><h3 id="fromboolean" tabindex="-1"><a class="header-anchor" href="#fromboolean" aria-hidden="true">#</a> fromBoolean</h3><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">inline</span> <span class="token keyword">fn</span> <span class="token function">fromBoolean</span><span class="token punctuation">(</span>val<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">bool</span></span><span class="token punctuation">)</span> Value
</code></pre></div><ul><li><strong><code>val</code></strong>: Boolean Create a buzz value from a boolean</li></ul><h3 id="frominteger" tabindex="-1"><a class="header-anchor" href="#frominteger" aria-hidden="true">#</a> fromInteger</h3><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">inline</span> <span class="token keyword">fn</span> <span class="token function">fromInteger</span><span class="token punctuation">(</span>val<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span><span class="token punctuation">)</span> Value
</code></pre></div><ul><li><strong><code>val</code></strong>: Integer Create a buzz value from an integer</li></ul><h3 id="fromfloat" tabindex="-1"><a class="header-anchor" href="#fromfloat" aria-hidden="true">#</a> fromFloat</h3><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">inline</span> <span class="token keyword">fn</span> <span class="token function">fromFloat</span><span class="token punctuation">(</span>val<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">f64</span></span><span class="token punctuation">)</span> Value
</code></pre></div><ul><li><strong><code>val</code></strong>: Float Create a buzz value from a float</li></ul><h3 id="fromobj" tabindex="-1"><a class="header-anchor" href="#fromobj" aria-hidden="true">#</a> fromObj</h3><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">inline</span> <span class="token keyword">fn</span> <span class="token function">fromObj</span><span class="token punctuation">(</span>val<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>anyopaque</span><span class="token punctuation">)</span> Value
</code></pre></div><ul><li><strong><code>val</code></strong>: Pointer Create a buzz value from a pointer</li></ul><h3 id="isbool" tabindex="-1"><a class="header-anchor" href="#isbool" aria-hidden="true">#</a> isBool</h3><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">inline</span> <span class="token keyword">fn</span> <span class="token function">isBool</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token builtin-type keyword">bool</span>
</code></pre></div><ul><li><strong><code>self</code></strong>: Buzz value</li></ul><p><strong>Returns:</strong> \`true if value is a boolean</p><h3 id="isinteger" tabindex="-1"><a class="header-anchor" href="#isinteger" aria-hidden="true">#</a> isInteger</h3><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">inline</span> <span class="token keyword">fn</span> <span class="token function">isInteger</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token builtin-type keyword">bool</span>
</code></pre></div><ul><li><strong><code>self</code></strong>: Buzz value</li></ul><p><strong>Returns:</strong> \`true if value is an integer</p><h3 id="isfloat" tabindex="-1"><a class="header-anchor" href="#isfloat" aria-hidden="true">#</a> isFloat</h3><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">inline</span> <span class="token keyword">fn</span> <span class="token function">isFloat</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token builtin-type keyword">bool</span>
</code></pre></div><ul><li><strong><code>self</code></strong>: Buzz value</li></ul><p><strong>Returns:</strong> \`true if value is a float</p><h3 id="isnumber" tabindex="-1"><a class="header-anchor" href="#isnumber" aria-hidden="true">#</a> isNumber</h3><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">inline</span> <span class="token keyword">fn</span> <span class="token function">isNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token builtin-type keyword">bool</span>
</code></pre></div><ul><li><strong><code>self</code></strong>: Buzz value</li></ul><p><strong>Returns:</strong> \`true if value is a number (int or float)</p><h3 id="isobj" tabindex="-1"><a class="header-anchor" href="#isobj" aria-hidden="true">#</a> isObj</h3><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">inline</span> <span class="token keyword">fn</span> <span class="token function">isObj</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token builtin-type keyword">bool</span>
</code></pre></div><ul><li><strong><code>self</code></strong>: Buzz value</li></ul><p><strong>Returns:</strong> \`true if value is a pointer</p><h3 id="isnull" tabindex="-1"><a class="header-anchor" href="#isnull" aria-hidden="true">#</a> isNull</h3><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">inline</span> <span class="token keyword">fn</span> <span class="token function">isNull</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token builtin-type keyword">bool</span>
</code></pre></div><ul><li><strong><code>self</code></strong>: Buzz value</li></ul><p><strong>Returns:</strong> <code>true if value is </code>null\`</p><h3 id="isvoid" tabindex="-1"><a class="header-anchor" href="#isvoid" aria-hidden="true">#</a> isVoid</h3><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">inline</span> <span class="token keyword">fn</span> <span class="token function">isVoid</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token builtin-type keyword">bool</span>
</code></pre></div><ul><li><strong><code>self</code></strong>: Buzz value</li></ul><p><strong>Returns:</strong> <code>true if value is </code>void\`</p><h3 id="boolean" tabindex="-1"><a class="header-anchor" href="#boolean" aria-hidden="true">#</a> boolean</h3><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">inline</span> <span class="token keyword">fn</span> <span class="token function">boolean</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token builtin-type keyword">bool</span>
</code></pre></div><ul><li><strong><code>self</code></strong>: Buzz value</li></ul><p><strong>Returns:</strong> the value as boolean</p><h3 id="integer" tabindex="-1"><a class="header-anchor" href="#integer" aria-hidden="true">#</a> integer</h3><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">inline</span> <span class="token keyword">fn</span> <span class="token function">integer</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token builtin-type keyword">i32</span>
</code></pre></div><ul><li><strong><code>self</code></strong>: Buzz value</li></ul><p><strong>Returns:</strong> the value as integer</p><h3 id="float" tabindex="-1"><a class="header-anchor" href="#float" aria-hidden="true">#</a> float</h3><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">inline</span> <span class="token keyword">fn</span> <span class="token function">float</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token builtin-type keyword">f64</span>
</code></pre></div><ul><li><strong><code>self</code></strong>: Buzz value</li></ul><p><strong>Returns:</strong> the value as float</p><h3 id="obj" tabindex="-1"><a class="header-anchor" href="#obj" aria-hidden="true">#</a> obj</h3><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">inline</span> <span class="token keyword">fn</span> <span class="token function">obj</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token operator">*</span>anyopaque
</code></pre></div><ul><li><strong><code>self</code></strong>: Buzz value <strong>Returns:</strong> the value as pointer</li></ul><h2 id="bz-toobjnative" tabindex="-1"><a class="header-anchor" href="#bz-toobjnative" aria-hidden="true">#</a> bz_toObjNative</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_toObjNative</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token operator">*</span>ObjNative</span><span class="token punctuation">;</span>
</code></pre></div><p>Converts buzz <code>Value</code> to an <code>ObjNative</code> pointer.</p><p><strong>Returns:</strong> The pointer</p><h2 id="bz-newvm" tabindex="-1"><a class="header-anchor" href="#bz-newvm" aria-hidden="true">#</a> bz_newVM</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_newVM</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">;</span>
</code></pre></div><p>Create a new buzz VM</p><ul><li><strong><code>self</code></strong>: Pointer to current buzz VM</li></ul><p><strong>Returns:</strong> Pointer to the new VM</p><h2 id="bz-deinitvm" tabindex="-1"><a class="header-anchor" href="#bz-deinitvm" aria-hidden="true">#</a> bz_deinitVM</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_deinitVM</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">void</span></span><span class="token punctuation">;</span>
</code></pre></div><ul><li><strong><code>self</code></strong>: Pointer to the buzz VM Deinit a buzz VM</li></ul><h2 id="bz-compile" tabindex="-1"><a class="header-anchor" href="#bz-compile" aria-hidden="true">#</a> bz_compile</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_compile</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> source<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">?</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token builtin-type keyword">u8</span></span><span class="token punctuation">,</span> source_len<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">usize</span></span><span class="token punctuation">,</span> file_name<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">?</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token builtin-type keyword">u8</span></span><span class="token punctuation">,</span> file_name_len<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">usize</span></span><span class="token punctuation">)</span> <span class="token class-name"><span class="token operator">?</span><span class="token operator">*</span>ObjFunction</span><span class="token punctuation">;</span>
</code></pre></div><p>Compile <code>source</code> and returns the compiled function</p><ul><li><strong><code>self</code></strong>: Pointer to the buzz VM</li><li><strong><code>source</code></strong>: Source to compile</li><li><strong><code>source_len</code></strong>: Length of the source string</li><li><strong><code>filename</code></strong>: Name of the script</li><li><strong><code>filename_len</code></strong>: Length of the script&#39;s name</li></ul><p><strong>Returns:</strong> Pointer to the compiled function or <code>null</code> if could not compile it</p><h2 id="bz-interpret" tabindex="-1"><a class="header-anchor" href="#bz-interpret" aria-hidden="true">#</a> bz_interpret</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_interpret</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> function<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>ObjFunction</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">bool</span></span><span class="token punctuation">;</span>
</code></pre></div><p>Interpret a buzz function</p><p><strong>Returns:</strong> <code>true</code> if interpretation succeeded, <code>false</code> otherwise</p><h2 id="bz-call" tabindex="-1"><a class="header-anchor" href="#bz-call" aria-hidden="true">#</a> bz_call</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_call</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> closure<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>ObjClosure</span><span class="token punctuation">,</span> arguments<span class="token punctuation">:</span> <span class="token class-name"><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token operator">*</span><span class="token keyword">const</span> Value</span><span class="token punctuation">,</span> len<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">usize</span></span><span class="token punctuation">,</span> catch_value<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">?</span><span class="token operator">*</span>Value</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">void</span></span><span class="token punctuation">;</span>
</code></pre></div><p>Calls a buzz closure</p><ul><li><strong><code>self</code></strong>: Pointer to the buzz VM</li><li><strong><code>closure</code></strong>: Closure to run</li><li><strong><code>arguments</code></strong>: Arguments</li><li><strong><code>len</code></strong>: Number of arguments</li><li><strong><code>catch_value</code></strong>: Pointer to the value which will be used a the function return value if the call fails (or <code>null</code> if none)</li></ul><h2 id="bz-push" tabindex="-1"><a class="header-anchor" href="#bz-push" aria-hidden="true">#</a> bz_push</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_push</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">void</span></span><span class="token punctuation">;</span>
</code></pre></div><p>Push a buzz value on the stack</p><ul><li><strong><code>self</code></strong>: Pointer to the buzz VM</li><li><strong><code>value</code></strong>: Value to push</li></ul><h2 id="bz-pop" tabindex="-1"><a class="header-anchor" href="#bz-pop" aria-hidden="true">#</a> bz_pop</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_pop</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">)</span> <span class="token class-name">Value</span><span class="token punctuation">;</span>
</code></pre></div><p>Pop a buzz value from the stack</p><ul><li><strong><code>self</code></strong>: Pointer to the buzz VM</li></ul><p><strong>Returns:</strong> the popped value</p><h2 id="bz-peek" tabindex="-1"><a class="header-anchor" href="#bz-peek" aria-hidden="true">#</a> bz_peek</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_peek</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> distance<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">u32</span></span><span class="token punctuation">)</span> <span class="token class-name">Value</span><span class="token punctuation">;</span>
</code></pre></div><p>Return the buzz value at <code>distance</code> from the top of the stack</p><ul><li><strong><code>self</code></strong>: Pointer to the buzz VM</li><li><strong><code>distance</code></strong>: Distance from the top of the stack</li></ul><p><strong>Returns:</strong> the peeked value</p><h2 id="bz-pushbool" tabindex="-1"><a class="header-anchor" href="#bz-pushbool" aria-hidden="true">#</a> bz_pushBool</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_pushBool</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">bool</span></span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">void</span></span><span class="token punctuation">;</span>
</code></pre></div><p>Push a buzz boolean value on the stack</p><ul><li><strong><code>self</code></strong>: Pointer to the buzz VM</li><li><strong><code>value</code></strong>: Boolean to push</li></ul><h2 id="bz-pushfloat" tabindex="-1"><a class="header-anchor" href="#bz-pushfloat" aria-hidden="true">#</a> bz_pushFloat</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_pushFloat</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">f64</span></span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">void</span></span><span class="token punctuation">;</span>
</code></pre></div><p>Push a buzz float value on the stack</p><ul><li><strong><code>self</code></strong>: Pointer to the buzz VM</li><li><strong><code>value</code></strong>: Float to push</li></ul><h2 id="bz-pushinteger" tabindex="-1"><a class="header-anchor" href="#bz-pushinteger" aria-hidden="true">#</a> bz_pushInteger</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_pushInteger</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">void</span></span><span class="token punctuation">;</span>
</code></pre></div><p>Push a buzz integer value on the stack</p><ul><li><strong><code>self</code></strong>: Pointer to the buzz VM</li><li><strong><code>value</code></strong>: Integer to push</li></ul><h2 id="bz-pushstring" tabindex="-1"><a class="header-anchor" href="#bz-pushstring" aria-hidden="true">#</a> bz_pushString</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_pushString</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>ObjString</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">void</span></span><span class="token punctuation">;</span>
</code></pre></div><p>Push a buzz string value on the stack</p><ul><li><strong><code>self</code></strong>: Pointer to the buzz VM</li><li><strong><code>value</code></strong>: String to push</li></ul><h2 id="bz-pushlist" tabindex="-1"><a class="header-anchor" href="#bz-pushlist" aria-hidden="true">#</a> bz_pushList</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_pushList</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>ObjList</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">void</span></span><span class="token punctuation">;</span>
</code></pre></div><p>Push a buzz list value on the stack</p><ul><li><strong><code>self</code></strong>: Pointer to the buzz VM</li><li><strong><code>value</code></strong>: List to push</li></ul><h2 id="bz-pushuserdata" tabindex="-1"><a class="header-anchor" href="#bz-pushuserdata" aria-hidden="true">#</a> bz_pushUserData</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_pushUserData</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>ObjUserData</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">void</span></span><span class="token punctuation">;</span>
</code></pre></div><p>Push a buzz user data value on the stack</p><ul><li><strong><code>self</code></strong>: Pointer to the buzz VM</li><li><strong><code>value</code></strong>: User data to push</li></ul><h2 id="bz-pushnull" tabindex="-1"><a class="header-anchor" href="#bz-pushnull" aria-hidden="true">#</a> bz_pushNull</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_pushNull</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">void</span></span><span class="token punctuation">;</span>
</code></pre></div><p>Push the null value on the stack</p><ul><li><strong><code>self</code></strong>: Pointer to the buzz VM</li></ul><h2 id="bz-pushvoid" tabindex="-1"><a class="header-anchor" href="#bz-pushvoid" aria-hidden="true">#</a> bz_pushVoid</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_pushVoid</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">void</span></span><span class="token punctuation">;</span>
</code></pre></div><p>Push the void value on the stack</p><ul><li><strong><code>self</code></strong>: Pointer to the buzz VM</li></ul><h2 id="bz-pushobjectinstance" tabindex="-1"><a class="header-anchor" href="#bz-pushobjectinstance" aria-hidden="true">#</a> bz_pushObjectInstance</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_pushObjectInstance</span><span class="token punctuation">(</span>vm<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>ObjObjectInstance</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">void</span></span><span class="token punctuation">;</span>
</code></pre></div><p>Push a buzz object instance value on the stack</p><ul><li><strong><code>self</code></strong>: Pointer to the buzz VM</li><li><strong><code>value</code></strong>: Object instance</li></ul><h2 id="bz-pushenuminstance" tabindex="-1"><a class="header-anchor" href="#bz-pushenuminstance" aria-hidden="true">#</a> bz_pushEnumInstance</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_pushEnumInstance</span><span class="token punctuation">(</span>vm<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>ObjEnumInstance</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">void</span></span><span class="token punctuation">;</span>
</code></pre></div><p>Push a buzz enum instance value on the stack</p><ul><li><strong><code>self</code></strong>: Pointer to the buzz VM</li><li><strong><code>value</code></strong>: Enum instance</li></ul><h2 id="bz-pusherror" tabindex="-1"><a class="header-anchor" href="#bz-pusherror" aria-hidden="true">#</a> bz_pushError</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_pushError</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> qualified_name<span class="token punctuation">:</span> <span class="token class-name"><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token builtin-type keyword">u8</span></span><span class="token punctuation">,</span> len<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">usize</span></span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">void</span></span><span class="token punctuation">;</span>
</code></pre></div><p>Push instance of an error object</p><ul><li><strong><code>self</code></strong>: Pointer to the buzz VM</li><li><strong><code>qualified_name</code></strong>: Qualified name of the error (e.g. <code>errors.FileSystemError</code>)</li><li><strong><code>len</code></strong>: Length of the qualified name</li></ul><h2 id="bz-pusherrorenum" tabindex="-1"><a class="header-anchor" href="#bz-pusherrorenum" aria-hidden="true">#</a> bz_pushErrorEnum</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_pushErrorEnum</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> qualified_name<span class="token punctuation">:</span> <span class="token class-name"><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token builtin-type keyword">u8</span></span><span class="token punctuation">,</span> name_len<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">usize</span></span><span class="token punctuation">,</span> case<span class="token punctuation">:</span> <span class="token class-name"><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token builtin-type keyword">u8</span></span><span class="token punctuation">,</span> case_len<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">usize</span></span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">void</span></span><span class="token punctuation">;</span>
</code></pre></div><p>Push instance of an error enum instance</p><ul><li><strong><code>self</code></strong>: Pointer to the buzz VM</li><li><strong><code>qualified_name</code></strong>: Qualified name of the enum</li><li><strong><code>name_len</code></strong>: Length of the enum&#39;s qualified name</li><li><strong><code>case</code></strong>: Enum case name</li><li><strong><code>case_len</code></strong>: Enum case name&#39;s length</li></ul><h2 id="bz-throw" tabindex="-1"><a class="header-anchor" href="#bz-throw" aria-hidden="true">#</a> bz_throw</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_throw</span><span class="token punctuation">(</span>vm<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">void</span></span><span class="token punctuation">;</span>
</code></pre></div><p>Raise an error</p><ul><li><strong><code>vm</code></strong>: Pointer to the buzz VM</li><li><strong><code>value</code></strong>: Value to raise</li></ul><h2 id="bz-getqualified" tabindex="-1"><a class="header-anchor" href="#bz-getqualified" aria-hidden="true">#</a> bz_getQualified</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_getQualified</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> qualified_name<span class="token punctuation">:</span> <span class="token class-name"><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token builtin-type keyword">u8</span></span><span class="token punctuation">,</span> len<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">usize</span></span><span class="token punctuation">)</span> <span class="token class-name">Value</span><span class="token punctuation">;</span>
</code></pre></div><p>Get global value with its qualified name</p><ul><li><strong><code>self</code></strong>: Pointer to the buzz VM</li><li><strong><code>qualified_name</code></strong>: Qualified name of the enum</li><li><strong><code>len</code></strong>: Length of the enum&#39;s qualified name</li></ul><p><strong>Returns:</strong> The global</p><h2 id="bz-allocated" tabindex="-1"><a class="header-anchor" href="#bz-allocated" aria-hidden="true">#</a> bz_allocated</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_allocated</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">usize</span></span><span class="token punctuation">;</span>
</code></pre></div><p>Get the current amount of allocated memory in bytes</p><ul><li><strong><code>self</code></strong>: Pointer to the buzz VM</li></ul><p><strong>Returns:</strong> Bytes allocated</p><h2 id="bz-collect" tabindex="-1"><a class="header-anchor" href="#bz-collect" aria-hidden="true">#</a> bz_collect</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_collect</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">bool</span></span><span class="token punctuation">;</span>
</code></pre></div><p>Trigger a GC sweep</p><ul><li><strong><code>self</code></strong>: Pointer to the buzz VM</li></ul><p><strong>Returns:</strong> <code>false</code> if the sweep failed</p><h2 id="bz-clone" tabindex="-1"><a class="header-anchor" href="#bz-clone" aria-hidden="true">#</a> bz_clone</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_clone</span><span class="token punctuation">(</span>vm<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token class-name">Value</span><span class="token punctuation">;</span>
</code></pre></div><p>Return a shallow copy of a value</p><ul><li><strong><code>self</code></strong>: Pointer to the buzz VM</li><li><strong><code>value</code></strong>: Value to clone</li></ul><p><strong>Returns:</strong> Value clone</p><h2 id="bz-valuetostring" tabindex="-1"><a class="header-anchor" href="#bz-valuetostring" aria-hidden="true">#</a> bz_valueToString</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_valueToString</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">,</span> len<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span><span class="token builtin-type keyword">usize</span></span><span class="token punctuation">)</span> <span class="token class-name"><span class="token operator">?</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token builtin-type keyword">u8</span></span><span class="token punctuation">;</span>
</code></pre></div><p>Converts a <code>ObjString</code> to a C string</p><ul><li><strong><code>value</code></strong>: Value to convert (must wrap an <code>ObjString</code>)</li><li><strong><code>len</code></strong>: The length of the string will be set there</li></ul><p><strong>Returns:</strong> The string</p><h2 id="bz-valuetouserdata" tabindex="-1"><a class="header-anchor" href="#bz-valuetouserdata" aria-hidden="true">#</a> bz_valueToUserData</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_valueToUserData</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token operator">*</span>UserData</span><span class="token punctuation">;</span>
</code></pre></div><p>Get user data pointer from a <code>ObjUserData</code> value</p><ul><li><strong><code>value</code></strong>: Value to convert (must wrap an <code>ObjUserData</code>)</li></ul><p><strong>Returns:</strong> User data pointer</p><h2 id="bz-valuedump" tabindex="-1"><a class="header-anchor" href="#bz-valuedump" aria-hidden="true">#</a> bz_valueDump</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_valueDump</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">,</span> vm<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">void</span></span><span class="token punctuation">;</span>
</code></pre></div><p>Dump value to <code>stderr</code>. Will limit itself to a depth of 50 levels.</p><ul><li><strong><code>value</code></strong>: Value to dump</li><li><strong><code>vm</code></strong>: Pointer to the buzz VM</li></ul><h2 id="bz-valuetoclosure" tabindex="-1"><a class="header-anchor" href="#bz-valuetoclosure" aria-hidden="true">#</a> bz_valueToClosure</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_valueToClosure</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token operator">*</span>ObjClosure</span><span class="token punctuation">;</span>
</code></pre></div><p>Converts a value to an <code>ObjClosure</code></p><ul><li><strong><code>value</code></strong>: Value to convert (must wrap an <code>ObjClosure</code>)</li></ul><p><strong>Returns:</strong> The <code>ObjClosure</code></p><h2 id="bz-valueequal" tabindex="-1"><a class="header-anchor" href="#bz-valueequal" aria-hidden="true">#</a> bz_valueEqual</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_valueEqual</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">,</span> other<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token class-name">Value</span><span class="token punctuation">;</span>
</code></pre></div><p>Compare two values</p><ul><li><strong><code>self</code></strong>: First value</li><li><strong><code>other</code></strong>: Other value</li></ul><p><strong>Returns:</strong> <code>true</code> if values are equal</p><h2 id="bz-valueis" tabindex="-1"><a class="header-anchor" href="#bz-valueis" aria-hidden="true">#</a> bz_valueIs</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_valueIs</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">,</span> type_def<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token class-name">Value</span><span class="token punctuation">;</span>
</code></pre></div><p>Check the type of a value</p><ul><li><strong><code>self</code></strong>: Value</li><li><strong><code>type_def</code></strong>: Type definition to check against (must be an <code>ObjTypeDef</code>)</li></ul><p><strong>Returns:</strong> <code>true</code> when <code>self</code> if of type <code>type_def</code></p><h2 id="bz-stringtype" tabindex="-1"><a class="header-anchor" href="#bz-stringtype" aria-hidden="true">#</a> bz_stringType</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_stringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token class-name">Value</span><span class="token punctuation">;</span>
</code></pre></div><p>Get the string type</p><p><strong>Returns:</strong> Return the string <code>ObjTypeDef</code> value</p><h2 id="bz-string" tabindex="-1"><a class="header-anchor" href="#bz-string" aria-hidden="true">#</a> bz_string</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_string</span><span class="token punctuation">(</span>vm<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> string<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">?</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token builtin-type keyword">u8</span></span><span class="token punctuation">,</span> len<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">usize</span></span><span class="token punctuation">)</span> <span class="token class-name"><span class="token operator">?</span><span class="token operator">*</span>ObjString</span><span class="token punctuation">;</span>
</code></pre></div><p>Create an <code>ObjString</code> from a C string</p><ul><li><strong><code>vm</code></strong>: Pointer to the buzz VM</li><li><strong><code>string</code></strong>: String to use</li><li><strong><code>len</code></strong>: Length of the string</li></ul><p><strong>Returns:</strong> The <code>ObjString</code> or <code>null</code> if allocation failed</p><h2 id="bz-objstringtostring" tabindex="-1"><a class="header-anchor" href="#bz-objstringtostring" aria-hidden="true">#</a> bz_objStringToString</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_objStringToString</span><span class="token punctuation">(</span>obj_string<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>ObjString</span><span class="token punctuation">,</span> len<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span><span class="token builtin-type keyword">usize</span></span><span class="token punctuation">)</span> <span class="token class-name"><span class="token operator">?</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token builtin-type keyword">u8</span></span><span class="token punctuation">;</span>
</code></pre></div><p>Get the C string from an <code>ObjString</code></p><ul><li><strong><code>obj_string</code></strong>: String to use</li><li><strong><code>len</code></strong>: The length of the string will be set there</li></ul><p><strong>Returns:</strong> C string of the <code>ObjString</code></p><h2 id="bz-objstringtovalue" tabindex="-1"><a class="header-anchor" href="#bz-objstringtovalue" aria-hidden="true">#</a> bz_objStringToValue</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_objStringToValue</span><span class="token punctuation">(</span>obj_string<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>ObjString</span><span class="token punctuation">)</span> <span class="token class-name">Value</span><span class="token punctuation">;</span>
</code></pre></div><p>Get buzz value from an <code>ObjString</code></p><ul><li><strong><code>obj_string</code></strong>: String to use</li></ul><p><strong>Returns:</strong> <code>ObjString</code></p><h2 id="bz-objstringconcat" tabindex="-1"><a class="header-anchor" href="#bz-objstringconcat" aria-hidden="true">#</a> bz_objStringConcat</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_objStringConcat</span><span class="token punctuation">(</span>vm<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> obj_string<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">,</span> other<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token class-name">Value</span><span class="token punctuation">;</span>
</code></pre></div><p>Concatenate two <code>ObjString</code></p><ul><li><strong><code>vm</code></strong>: Pointer to the buzz VM</li><li><strong><code>obj_string</code></strong>: First <code>ObjString</code></li><li><strong><code>other</code></strong>: Second <code>ObjString</code></li></ul><p><strong>Returns:</strong> New <code>ObjString</code></p><h2 id="bz-tostring" tabindex="-1"><a class="header-anchor" href="#bz-tostring" aria-hidden="true">#</a> bz_toString</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_toString</span><span class="token punctuation">(</span>vm<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token class-name">Value</span><span class="token punctuation">;</span>
</code></pre></div><p>Convert value to its string representation</p><ul><li><strong><code>vm</code></strong>: Pointer to the buzz VM</li><li><strong><code>value</code></strong>: Value to convert</li></ul><p><strong>Returns:</strong> New <code>ObjString</code></p><h2 id="bz-newlist" tabindex="-1"><a class="header-anchor" href="#bz-newlist" aria-hidden="true">#</a> bz_newList</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_newList</span><span class="token punctuation">(</span>vm<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> of_type<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token class-name">Value</span><span class="token punctuation">;</span>
</code></pre></div><p>Create new list of the given type</p><ul><li><strong><code>vm</code></strong>: Pointer to the buzz VM</li><li><strong><code>of_type</code></strong>: <code>ObjTypeDef</code> of the list items</li></ul><p><strong>Returns:</strong> New <code>ObjList</code></p><h2 id="bz-listappend" tabindex="-1"><a class="header-anchor" href="#bz-listappend" aria-hidden="true">#</a> bz_listAppend</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_listAppend</span><span class="token punctuation">(</span>vm<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> list<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">void</span></span><span class="token punctuation">;</span>
</code></pre></div><p>Create new list of the given type</p><ul><li><strong><code>vm</code></strong>: Pointer to the buzz VM</li><li><strong><code>list</code></strong>: <code>ObjList</code></li><li><strong><code>value</code></strong>: Value to add</li></ul><h2 id="bz-valuetolist" tabindex="-1"><a class="header-anchor" href="#bz-valuetolist" aria-hidden="true">#</a> bz_valueToList</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_valueToList</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token operator">*</span>ObjList</span><span class="token punctuation">;</span>
</code></pre></div><p>Converts a value to an <code>ObjList</code></p><ul><li><strong><code>value</code></strong>: Value to convert</li></ul><p><strong>Returns:</strong> The <code>ObjList</code></p><h2 id="bz-listget" tabindex="-1"><a class="header-anchor" href="#bz-listget" aria-hidden="true">#</a> bz_listGet</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_listGet</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">usize</span></span><span class="token punctuation">)</span> <span class="token class-name">Value</span><span class="token punctuation">;</span>
</code></pre></div><p>Get element of list at given index</p><ul><li><strong><code>self</code></strong>: <code>ObjList</code></li><li><strong><code>index</code></strong>: Index</li></ul><p><strong>Returns:</strong> Element of the list</p><h2 id="bz-listset" tabindex="-1"><a class="header-anchor" href="#bz-listset" aria-hidden="true">#</a> bz_listSet</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_listSet</span><span class="token punctuation">(</span>vm<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> self<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">usize</span></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">void</span></span><span class="token punctuation">;</span>
</code></pre></div><p>Set element of list at given index</p><ul><li><strong><code>self</code></strong>: <code>ObjList</code></li><li><strong><code>index</code></strong>: Index</li><li><strong><code>value</code></strong>: Element to set</li></ul><h2 id="bz-listlen" tabindex="-1"><a class="header-anchor" href="#bz-listlen" aria-hidden="true">#</a> bz_listLen</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_listLen</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>ObjList</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">usize</span></span><span class="token punctuation">;</span>
</code></pre></div><p>Get list length</p><ul><li><strong><code>self</code></strong>: <code>ObjList</code></li></ul><p><strong>Returns:</strong> Length of the list</p><h2 id="bz-listconcat" tabindex="-1"><a class="header-anchor" href="#bz-listconcat" aria-hidden="true">#</a> bz_listConcat</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_listConcat</span><span class="token punctuation">(</span>vm<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> list<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">,</span> other_list<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token class-name">Value</span><span class="token punctuation">;</span>
</code></pre></div><p>Concatenate two <code>ObjList</code></p><ul><li><strong><code>vm</code></strong>: Pointer to the buzz VM</li><li><strong><code>obj_string</code></strong>: First <code>ObjList</code></li><li><strong><code>other</code></strong>: Second <code>ObjList</code></li></ul><p><strong>Returns:</strong> New <code>ObjList</code></p><h2 id="bz-newmap" tabindex="-1"><a class="header-anchor" href="#bz-newmap" aria-hidden="true">#</a> bz_newMap</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_newMap</span><span class="token punctuation">(</span>vm<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> map_type<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token class-name">Value</span><span class="token punctuation">;</span>
</code></pre></div><p>Create new map of the given type</p><ul><li><strong><code>vm</code></strong>: Pointer to the buzz VM</li><li><strong><code>map_type</code></strong>: <code>ObjTypeDef</code> of the map</li></ul><p><strong>Returns:</strong> New <code>ObjMap</code></p><h2 id="bz-mapset" tabindex="-1"><a class="header-anchor" href="#bz-mapset" aria-hidden="true">#</a> bz_mapSet</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_mapSet</span><span class="token punctuation">(</span>vm<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> map<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">void</span></span><span class="token punctuation">;</span>
</code></pre></div><p>Set element of map at given index</p><ul><li><strong><code>self</code></strong>: <code>ObjList</code></li><li><strong><code>key</code></strong>: Key</li><li><strong><code>value</code></strong>: Element to set</li></ul><h2 id="bz-mapget" tabindex="-1"><a class="header-anchor" href="#bz-mapget" aria-hidden="true">#</a> bz_mapGet</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_mapGet</span><span class="token punctuation">(</span>map<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token class-name">Value</span><span class="token punctuation">;</span>
</code></pre></div><p>Get element of map at given index</p><ul><li><strong><code>self</code></strong>: <code>ObjMap</code></li><li><strong><code>key</code></strong>: Key</li></ul><p><strong>Returns:</strong> Element of the map</p><h2 id="bz-mapconcat" tabindex="-1"><a class="header-anchor" href="#bz-mapconcat" aria-hidden="true">#</a> bz_mapConcat</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_mapConcat</span><span class="token punctuation">(</span>vm<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> map<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">,</span> other_map<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token class-name">Value</span><span class="token punctuation">;</span>
</code></pre></div><p>Concatenate two <code>ObjMap</code></p><ul><li><strong><code>vm</code></strong>: Pointer to the buzz VM</li><li><strong><code>obj_string</code></strong>: First <code>ObjMap</code></li><li><strong><code>other</code></strong>: Second <code>ObjMap</code></li></ul><p><strong>Returns:</strong> New <code>ObjMap</code></p><h2 id="bz-newuserdata" tabindex="-1"><a class="header-anchor" href="#bz-newuserdata" aria-hidden="true">#</a> bz_newUserData</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_newUserData</span><span class="token punctuation">(</span>vm<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> userdata<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>UserData</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token operator">?</span><span class="token operator">*</span>ObjUserData</span><span class="token punctuation">;</span>
</code></pre></div><p>Create new <code>ObjUserData</code> from opaque pointer</p><ul><li><strong><code>vm</code></strong>: Pointer to the buzz VM</li><li><strong><code>userdata</code></strong>: Pointer to wrap</li></ul><p><strong>Returns:</strong> New <code>ObjUserData</code></p><h2 id="bz-userdatatovalue" tabindex="-1"><a class="header-anchor" href="#bz-userdatatovalue" aria-hidden="true">#</a> bz_userDataToValue</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_userDataToValue</span><span class="token punctuation">(</span>userdata<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>ObjUserData</span><span class="token punctuation">)</span> <span class="token class-name">Value</span><span class="token punctuation">;</span>
</code></pre></div><p>Wraps <code>ObjUserData</code> in a buzz value</p><ul><li><strong><code>userdata</code></strong>: <code>ObjUserData</code></li></ul><p><strong>Returns:</strong> value</p><h2 id="bz-valuetoobject" tabindex="-1"><a class="header-anchor" href="#bz-valuetoobject" aria-hidden="true">#</a> bz_valueToObject</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_valueToObject</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token operator">*</span>ObjObject</span><span class="token punctuation">;</span>
</code></pre></div><p>Convert value to <code>ObjObject</code></p><ul><li><strong><code>value</code></strong>: Value to convert</li></ul><p><strong>Returns:</strong> <code>ObjObject</code></p><h2 id="bz-instance" tabindex="-1"><a class="header-anchor" href="#bz-instance" aria-hidden="true">#</a> bz_instance</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_instance</span><span class="token punctuation">(</span>vm<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> object_value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">,</span> typedef_value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token class-name">Value</span><span class="token punctuation">;</span>
</code></pre></div><p>Create new instance of the given <code>ObjObject</code></p><ul><li><strong><code>vm</code></strong>: Pointer to the buzz VM</li><li><strong><code>object_value</code></strong>: <code>ObjObject</code> to instanciate</li><li><strong><code>typedef_value</code></strong>: <code>ObjTypeDef</code> of the instance (TODO: should not be required)</li></ul><p><strong>Returns:</strong> <code>ObjObjectInstance</code></p><h2 id="bz-setinstancefield" tabindex="-1"><a class="header-anchor" href="#bz-setinstancefield" aria-hidden="true">#</a> bz_setInstanceField</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_setInstanceField</span><span class="token punctuation">(</span>vm<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> instance_value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">,</span> field_name_value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">void</span></span><span class="token punctuation">;</span>
</code></pre></div><p>Set instance field</p><ul><li><strong><code>vm</code></strong>: Pointer to the buzz VM</li><li><strong><code>instance_value</code></strong>: <code>ObjObjectInstance</code></li><li><strong><code>field_name_value</code></strong>: Field name <code>ObjString</code></li><li><strong><code>value</code></strong>: Value to set</li></ul><h2 id="bz-getinstancefield" tabindex="-1"><a class="header-anchor" href="#bz-getinstancefield" aria-hidden="true">#</a> bz_getInstanceField</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_getInstanceField</span><span class="token punctuation">(</span>vm<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> instance_value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">,</span> field_name_value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token class-name">Value</span><span class="token punctuation">;</span>
</code></pre></div><p>Get instance field</p><ul><li><strong><code>vm</code></strong>: Pointer to the buzz VM</li><li><strong><code>instance_value</code></strong>: <code>ObjObjectInstance</code></li><li><strong><code>field_name_value</code></strong>: Field name <code>ObjString</code></li></ul><p><strong>Returns:</strong> field value</p><h2 id="bz-getobjectfield" tabindex="-1"><a class="header-anchor" href="#bz-getobjectfield" aria-hidden="true">#</a> bz_getObjectField</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_getObjectField</span><span class="token punctuation">(</span>object_value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">,</span> field_name_value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token class-name">Value</span><span class="token punctuation">;</span>
</code></pre></div><p>Get static object field</p><ul><li><strong><code>vm</code></strong>: Pointer to the buzz VM</li><li><strong><code>object_value</code></strong>: <code>ObjObject</code></li><li><strong><code>field_name_value</code></strong>: Field name <code>ObjString</code></li></ul><p><strong>Returns:</strong> field value</p><h2 id="bz-setobjectfield" tabindex="-1"><a class="header-anchor" href="#bz-setobjectfield" aria-hidden="true">#</a> bz_setObjectField</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_setObjectField</span><span class="token punctuation">(</span>vm<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> object_value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">,</span> field_name_value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">void</span></span><span class="token punctuation">;</span>
</code></pre></div><p>Set static object field</p><ul><li><strong><code>vm</code></strong>: Pointer to the buzz VM</li><li><strong><code>object_value</code></strong>: <code>ObjObject</code></li><li><strong><code>field_name_value</code></strong>: Field name <code>ObjString</code></li><li><strong><code>value</code></strong>: Value to set</li></ul><h2 id="bz-getenumcasevalue" tabindex="-1"><a class="header-anchor" href="#bz-getenumcasevalue" aria-hidden="true">#</a> bz_getEnumCaseValue</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_getEnumCaseValue</span><span class="token punctuation">(</span>enum_instance_value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token class-name">Value</span><span class="token punctuation">;</span>
</code></pre></div><p>Get enum case value</p><ul><li><strong><code>enum_instance_value</code></strong>: <code>ObjEnumInstance</code></li></ul><p><strong>Returns:</strong> case value</p><h2 id="bz-getenumcase" tabindex="-1"><a class="header-anchor" href="#bz-getenumcase" aria-hidden="true">#</a> bz_getEnumCase</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_getEnumCase</span><span class="token punctuation">(</span>vm<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> enum_value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">,</span> case_name_value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token class-name">Value</span><span class="token punctuation">;</span>
</code></pre></div><p>Get enum case</p><ul><li><strong><code>enum_instance_value</code></strong>: <code>ObjEnumInstance</code></li><li><strong><code>case_name_value</code></strong>: Case name as <code>ObjString</code></li></ul><p><strong>Returns:</strong> <code>ObjEnumInstance</code></p><h2 id="bz-getenumcasefromvalue" tabindex="-1"><a class="header-anchor" href="#bz-getenumcasefromvalue" aria-hidden="true">#</a> bz_getEnumCaseFromValue</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bz_getEnumCaseFromValue</span><span class="token punctuation">(</span>vm<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>VM</span><span class="token punctuation">,</span> enum_value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">,</span> case_value<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token class-name">Value</span><span class="token punctuation">;</span>
</code></pre></div><p>Get <code>ObjEnumInstance</code> from case value</p><ul><li><strong><code>vm</code></strong>: Pointer to the buzz VM</li><li><strong><code>enum_value</code></strong>: <code>ObjEnum</code></li><li><strong><code>case_value</code></strong>: Case value</li></ul><p><strong>Returns:</strong> <code>ObjEnumInstance</code></p><h2 id="objupvalue" tabindex="-1"><a class="header-anchor" href="#objupvalue" aria-hidden="true">#</a> ObjUpValue</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">const</span> ObjUpValue
</code></pre></div><p>Opaque structure that represents a upvalue</p><h2 id="objnative" tabindex="-1"><a class="header-anchor" href="#objnative" aria-hidden="true">#</a> ObjNative</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">const</span> ObjNative
</code></pre></div><p>Opaque structure that represents a native function</p><h2 id="objfunction" tabindex="-1"><a class="header-anchor" href="#objfunction" aria-hidden="true">#</a> ObjFunction</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">const</span> ObjFunction
</code></pre></div><p>Opaque structure that represents a function</p><h2 id="objclosure" tabindex="-1"><a class="header-anchor" href="#objclosure" aria-hidden="true">#</a> ObjClosure</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">const</span> ObjClosure
</code></pre></div><p>Opaque structure that represents a closure</p><h2 id="objtypedef" tabindex="-1"><a class="header-anchor" href="#objtypedef" aria-hidden="true">#</a> ObjTypeDef</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">const</span> ObjTypeDef
</code></pre></div><p>Opaque structure that represents a type definition</p><h2 id="objstring" tabindex="-1"><a class="header-anchor" href="#objstring" aria-hidden="true">#</a> ObjString</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">const</span> ObjString
</code></pre></div><p>Opaque structure that represents a string</p><h2 id="objlist" tabindex="-1"><a class="header-anchor" href="#objlist" aria-hidden="true">#</a> ObjList</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">const</span> ObjList
</code></pre></div><p>Opaque structure that represents a list</p><h2 id="objmap" tabindex="-1"><a class="header-anchor" href="#objmap" aria-hidden="true">#</a> ObjMap</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">const</span> ObjMap
</code></pre></div><p>Opaque structure that represents a map</p><h2 id="objuserdata" tabindex="-1"><a class="header-anchor" href="#objuserdata" aria-hidden="true">#</a> ObjUserData</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">const</span> ObjUserData
</code></pre></div><p>Opaque structure that represents a user data</p><h2 id="objobjectinstance" tabindex="-1"><a class="header-anchor" href="#objobjectinstance" aria-hidden="true">#</a> ObjObjectInstance</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">const</span> ObjObjectInstance
</code></pre></div><p>Opaque structure that represents an object instance</p><h2 id="objobject" tabindex="-1"><a class="header-anchor" href="#objobject" aria-hidden="true">#</a> ObjObject</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">const</span> ObjObject
</code></pre></div><p>Opaque structure that represents an object</p><h2 id="objenuminstance" tabindex="-1"><a class="header-anchor" href="#objenuminstance" aria-hidden="true">#</a> ObjEnumInstance</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">const</span> ObjEnumInstance
</code></pre></div><p>Opaque structure that represents an enum instance</p><h2 id="objenum" tabindex="-1"><a class="header-anchor" href="#objenum" aria-hidden="true">#</a> ObjEnum</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">const</span> ObjEnum
</code></pre></div><p>Opaque structure that represents an enum</p><h2 id="objpattern" tabindex="-1"><a class="header-anchor" href="#objpattern" aria-hidden="true">#</a> ObjPattern</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">const</span> ObjPattern
</code></pre></div><p>Opaque structure that represents a pattern</p><h2 id="objfiber" tabindex="-1"><a class="header-anchor" href="#objfiber" aria-hidden="true">#</a> ObjFiber</h2><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token keyword">pub</span> <span class="token keyword">const</span> ObjFiber
</code></pre></div><p>Opaque structure that represents a fiber</p>`,390);function g(b,h){const n=t("ExternalLinkIcon");return o(),p("div",null,[u,s("p",null,[a("The "),r,a(" makes it possible to interact with the buzz VM from C ABI compatible code. Most of the standard library "),s("a",d,[a("is implemented using it"),c(n)]),a(". If you plan to make bindings to a C library, using this API is the way to go.")]),k])}const f=e(i,[["render",g],["__file","api.html.vue"]]);export{f as default};
