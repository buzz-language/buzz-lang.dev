import{_ as a,o as s,c as n,a as e}from"./app-ffa276ea.js";const t={},o=e(`<h1 id="buffer" tabindex="-1"><a class="header-anchor" href="#buffer" aria-hidden="true">#</a> <code>Buffer</code></h1><h2 id="buffer-1" tabindex="-1"><a class="header-anchor" href="#buffer-1" aria-hidden="true">#</a> Buffer</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">object</span> <span class="token class-name">Buffer</span> 
</code></pre></div><p>Read and write data to a string <code>Buffer</code></p><h3 id="init" tabindex="-1"><a class="header-anchor" href="#init" aria-hidden="true">#</a> init</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">static</span> <span class="token keyword">fun</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity <span class="token operator">=</span> <span class="token number">0)</span> <span class="token operator">&gt;</span> <span class="token class-name">Buffer</span>
</code></pre></div><p>Create a <code>Buffer</code></p><ul><li><strong><code>capacity</code>:</strong> Optional initial capacity of the <code>Buffer</code></li></ul><p><strong>Returns:</strong> New <code>Buffer</code></p><h3 id="fromstr" tabindex="-1"><a class="header-anchor" href="#fromstr" aria-hidden="true">#</a> fromStr</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">static</span> <span class="token keyword">fun</span> <span class="token function">fromStr</span><span class="token punctuation">(</span><span class="token keyword">str</span> string<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token class-name">Buffer</span>
</code></pre></div><p>Create a <code>Buffer</code> with <code>string</code> as its initial value</p><ul><li><strong><code>string</code>:</strong> Initial value</li></ul><p><strong>Returns:</strong> New <code>Buffer</code></p><h3 id="collect" tabindex="-1"><a class="header-anchor" href="#collect" aria-hidden="true">#</a> collect</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span>
</code></pre></div><p>Free underlying memory (automatically called by the Garbage Collector)</p><h3 id="read" tabindex="-1"><a class="header-anchor" href="#read" aria-hidden="true">#</a> read</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">1)</span> <span class="token operator">&gt;</span> <span class="token keyword">str</span><span class="token operator">?</span>
</code></pre></div><p>Read bytes</p><ul><li><strong><code>n</code>:</strong> How many bytes to read</li></ul><p><strong>Returns:</strong> Binary string</p><h3 id="write" tabindex="-1"><a class="header-anchor" href="#write" aria-hidden="true">#</a> write</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">str</span> bytes<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token operator">!&gt;</span> <span class="token class-name">WriteWhileReadingError</span>
</code></pre></div><p>Write bytes</p><ul><li><strong><code>bytes</code>:</strong> Bytes to write</li></ul><h3 id="writez" tabindex="-1"><a class="header-anchor" href="#writez" aria-hidden="true">#</a> writeZ</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> writeZ<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">str</span> zigType<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span> values<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token operator">!&gt;</span> <span class="token class-name">WriteWhileReadingError</span><span class="token punctuation">,</span> <span class="token class-name">FFITypeMismatchError</span>
</code></pre></div><p>Write <code>values</code> to the <code>Buffer</code> checking that <code>T</code> matches the zig type specified by <code>zigType</code></p><ul><li><strong><code>zigType</code>:</strong> Zig type (must match C ABI)</li><li><strong><code>values</code>:</strong> Values to write</li></ul><h3 id="writezat" tabindex="-1"><a class="header-anchor" href="#writezat" aria-hidden="true">#</a> writeZAt</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> writeZAt<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> at<span class="token punctuation">,</span> <span class="token keyword">str</span> zigType<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span> values<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token operator">!&gt;</span> <span class="token class-name">WriteWhileReadingError</span><span class="token punctuation">,</span> <span class="token class-name">FFITypeMismatchError</span>
</code></pre></div><p>Write <code>values</code> to the <code>Buffer</code> at index <code>at</code>, checking that <code>T</code> matches the zig type specified by <code>zigType</code></p><ul><li><strong><code>at</code>:</strong> Where to write the data in the <code>Buffer</code></li><li><strong><code>zigType</code>:</strong> Zig type (must match C ABI)</li><li><strong><code>values</code>:</strong> Values to write</li></ul><h3 id="readz" tabindex="-1"><a class="header-anchor" href="#readz" aria-hidden="true">#</a> readZ</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> readZ<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">str</span> zigType<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token class-name">T</span> <span class="token operator">!&gt;</span> <span class="token class-name">FFITypeMismatchError</span>
</code></pre></div><p>Read data from the <code>Buffer</code> checking that <code>T</code> matches the zig type specified by <code>zigType</code></p><ul><li><strong><code>zigType</code>:</strong> Zig type (must match C ABI)</li></ul><p><strong>Returns:</strong> Data read of buzz type <code>T</code> and zig type <code>zigType</code></p><h3 id="readzat" tabindex="-1"><a class="header-anchor" href="#readzat" aria-hidden="true">#</a> readZAt</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> readZAt<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> at<span class="token punctuation">,</span> <span class="token keyword">str</span> zigType<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token class-name">T</span> <span class="token operator">!&gt;</span> <span class="token class-name">FFITypeMismatchError</span>
</code></pre></div><p>Read data from the <code>Buffer</code> at index <code>at</code>, checking that <code>T</code> matches the zig type specified by <code>zigType</code></p><ul><li><strong><code>at</code>:</strong> Where to read the data in the <code>Buffer</code></li><li><strong><code>zigType</code>:</strong> Zig type (must match C ABI)</li></ul><p><strong>Returns:</strong> Data read of buzz type <code>T</code> and zig type <code>zigType</code></p><h3 id="writestruct" tabindex="-1"><a class="header-anchor" href="#writestruct" aria-hidden="true">#</a> writeStruct</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> writeStruct<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">type</span> structType<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span> values<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token operator">!&gt;</span> <span class="token class-name">WriteWhileReadingError</span><span class="token punctuation">,</span> <span class="token class-name">FFITypeMismatchError</span>
</code></pre></div><p>Write foreign struct(s) of type <code>T</code> to the <code>Buffer</code>. The struct type is specified both for the compiler with generic type <code>T</code> and to the function with <code>structType</code> which will be used to know the specific layout and size of the struct.</p><ul><li><strong><code>structType</code></strong>: Struct type</li><li><strong><code>values</code></strong>: Values to write</li></ul><h3 id="writestructat" tabindex="-1"><a class="header-anchor" href="#writestructat" aria-hidden="true">#</a> writeStructAt</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> writeStructAt<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">type</span> structType<span class="token punctuation">,</span> <span class="token keyword">int</span> at<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span> values<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token operator">!&gt;</span> <span class="token class-name">WriteWhileReadingError</span><span class="token punctuation">,</span> <span class="token class-name">FFITypeMismatchError</span>
</code></pre></div><p>Write foreign struct(s) of type <code>T</code> to the <code>Buffer</code> at index <code>at</code>. The struct type is specified both for the compiler with generic type <code>T</code> and to the function with <code>structType</code> which will be used to know the specific layout and size of the struct.</p><ul><li><strong><code>structType</code></strong>: Struct type</li><li><strong><code>at</code>:</strong> Where to write the data to the <code>Buffer</code></li><li><strong><code>values</code></strong>: Values to write</li></ul><h3 id="readstruct" tabindex="-1"><a class="header-anchor" href="#readstruct" aria-hidden="true">#</a> readStruct</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> readStruct<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">type</span> structType<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token class-name">T</span> <span class="token operator">!&gt;</span> <span class="token class-name">FFITypeMismatchError</span>
</code></pre></div><p>Read foreign struct of type <code>T</code> from the <code>Buffer</code>. The struct type is specified both for the compiler with generic type <code>T</code> and to the function with <code>structType</code> which will be used to know the specific layout and size of the struct.</p><ul><li><strong><code>structType</code></strong>: Struct type</li></ul><p><strong>Returns:</strong> Value read</p><h3 id="readstructat" tabindex="-1"><a class="header-anchor" href="#readstructat" aria-hidden="true">#</a> readStructAt</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> readStructAt<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">type</span> structType<span class="token punctuation">,</span> <span class="token keyword">int</span> at<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token class-name">T</span> <span class="token operator">!&gt;</span> <span class="token class-name">FFITypeMismatchError</span>
</code></pre></div><p>Read foreign struct of type <code>T</code> from the <code>Buffer</code> at index <code>at</code>. The struct type is specified both for the compiler with generic type <code>T</code> and to the function with <code>structType</code> which will be used to know the specific layout and size of the struct.</p><ul><li><strong><code>structType</code></strong>: Struct type</li></ul><p><strong>Returns:</strong> Value read</p><h3 id="readboolean" tabindex="-1"><a class="header-anchor" href="#readboolean" aria-hidden="true">#</a> readBoolean</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">readBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">bool</span><span class="token operator">?</span>
</code></pre></div><p>Read a boolean <strong>Returns:</strong> Boolean read</p><h3 id="writeboolean" tabindex="-1"><a class="header-anchor" href="#writeboolean" aria-hidden="true">#</a> writeBoolean</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">writeBoolean</span><span class="token punctuation">(</span><span class="token keyword">bool</span> boolean<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token operator">!&gt;</span> <span class="token class-name">WriteWhileReadingError</span>
</code></pre></div><p>Write a boolean</p><ul><li><strong><code>boolean</code>:</strong> Boolean to write</li></ul><h3 id="readint" tabindex="-1"><a class="header-anchor" href="#readint" aria-hidden="true">#</a> readInt</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">int</span><span class="token operator">?</span>
</code></pre></div><p>Read a integer <strong>Returns:</strong> Integer read</p><h3 id="writeint" tabindex="-1"><a class="header-anchor" href="#writeint" aria-hidden="true">#</a> writeInt</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token operator">!&gt;</span> <span class="token class-name">WriteWhileReadingError</span>
</code></pre></div><p>Write an integer</p><ul><li><strong><code>number</code>:</strong> Integer to write</li></ul><h3 id="readfloat" tabindex="-1"><a class="header-anchor" href="#readfloat" aria-hidden="true">#</a> readFloat</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">readFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">float</span><span class="token operator">?</span>
</code></pre></div><p>Read a float <strong>Returns:</strong> Float read</p><h3 id="writefloat" tabindex="-1"><a class="header-anchor" href="#writefloat" aria-hidden="true">#</a> writeFloat</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">writeFloat</span><span class="token punctuation">(</span><span class="token keyword">float</span> number<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token operator">!&gt;</span> <span class="token class-name">WriteWhileReadingError</span>
</code></pre></div><p>Write an float</p><ul><li><strong><code>number</code>:</strong> Float to write</li></ul><h3 id="len" tabindex="-1"><a class="header-anchor" href="#len" aria-hidden="true">#</a> len</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token keyword">int</span> align <span class="token operator">=</span> <span class="token number">1)</span> <span class="token operator">&gt;</span> <span class="token keyword">int</span>
</code></pre></div><p>Get <code>Buffer</code> length</p><ul><li><strong><code>align</code>:</strong> Alignement</li></ul><p><strong>Returns:</strong> Buffer length</p><h3 id="cursor" tabindex="-1"><a class="header-anchor" href="#cursor" aria-hidden="true">#</a> cursor</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">cursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">int</span>
</code></pre></div><p>Get current position in the <code>Buffer</code><strong>Returns:</strong> Current position</p><h3 id="empty" tabindex="-1"><a class="header-anchor" href="#empty" aria-hidden="true">#</a> empty</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span>
</code></pre></div><p>Empty the <code>Buffer</code> (retains capacity)</p><h3 id="ptr" tabindex="-1"><a class="header-anchor" href="#ptr" aria-hidden="true">#</a> ptr</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">ptr</span><span class="token punctuation">(</span><span class="token keyword">int</span> at <span class="token operator">=</span> <span class="token number">0,</span> <span class="token keyword">int</span> align <span class="token operator">=</span> <span class="token number">1)</span> <span class="token operator">&gt;</span> <span class="token keyword">ud</span>
</code></pre></div><p>Returns pointer at <code>at * align</code> in the <code>Buffer</code> as userdata</p><ul><li><strong><code>at</code>:</strong> From where to get the pointer</li><li><strong><code>align</code>:</strong> Alignment</li></ul><p><strong>Returns:</strong> Pointer</p><h3 id="tostring" tabindex="-1"><a class="header-anchor" href="#tostring" aria-hidden="true">#</a> toString</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">str</span>
</code></pre></div><p>Get <code>Buffer</code> content as a string <strong>Returns:</strong> Buffer content</p><h3 id="at" tabindex="-1"><a class="header-anchor" href="#at" aria-hidden="true">#</a> at</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">at</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">int</span> <span class="token operator">!&gt;</span> <span class="token class-name">OutOfBoundError</span>
</code></pre></div><p>Get byte at given index</p><ul><li><strong><code>index</code>:</strong> Which byte to get <strong>Returns:</strong> Byte</li></ul><h3 id="setat" tabindex="-1"><a class="header-anchor" href="#setat" aria-hidden="true">#</a> setAt</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">setAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token operator">!&gt;</span> <span class="token class-name">WriteWhileReadingError</span><span class="token punctuation">,</span> <span class="token class-name">OutOfBoundError</span>
</code></pre></div><p>Set byte at given index</p><ul><li><strong><code>index</code>:</strong> Which byte to set</li><li><strong><code>value</code>:</strong> Value to set</li></ul>`,110),p=[o];function c(r,l){return s(),n("div",null,p)}const i=a(t,[["render",c],["__file","buffer.html.vue"]]);export{i as default};
