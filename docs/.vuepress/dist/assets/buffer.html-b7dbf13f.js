import{_ as a,o as n,c as s,a as e}from"./app-a57b3b7d.js";const t={},o=e(`<h1 id="buffer" tabindex="-1"><a class="header-anchor" href="#buffer" aria-hidden="true">#</a> buffer</h1><h2 id="buffer-1" tabindex="-1"><a class="header-anchor" href="#buffer-1" aria-hidden="true">#</a> Buffer</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">object</span> <span class="token class-name">Buffer</span> 
</code></pre></div><p>Read and write data to a string buffer</p><h3 id="buffer-2" tabindex="-1"><a class="header-anchor" href="#buffer-2" aria-hidden="true">#</a> buffer</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">ud</span> buffer
</code></pre></div><p>Pointer to underlying buffer memory</p><h3 id="init" tabindex="-1"><a class="header-anchor" href="#init" aria-hidden="true">#</a> init</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">static</span> <span class="token keyword">fun</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity <span class="token operator">=</span> <span class="token number">0)</span> <span class="token operator">&gt;</span> <span class="token class-name">Buffer</span>
</code></pre></div><p>Create a <code>Buffer</code></p><ul><li><strong><code>capacity</code>:</strong> Optional initial capacity of the buffer</li></ul><p><strong>Returns:</strong> New buffer</p><h3 id="read" tabindex="-1"><a class="header-anchor" href="#read" aria-hidden="true">#</a> read</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">str</span><span class="token operator">?</span>
</code></pre></div><p>Read bytes</p><ul><li><strong><code>n</code>:</strong> How many bytes to read</li></ul><p><strong>Returns:</strong> Binary string</p><h3 id="write" tabindex="-1"><a class="header-anchor" href="#write" aria-hidden="true">#</a> write</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">str</span> bytes<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token operator">!&gt;</span> <span class="token class-name">WriteWhileReadingError</span>
</code></pre></div><p>Write bytes</p><ul><li><strong><code>bytes</code>:</strong> Bytes to write</li></ul><h3 id="readboolean" tabindex="-1"><a class="header-anchor" href="#readboolean" aria-hidden="true">#</a> readBoolean</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">readBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">bool</span><span class="token operator">?</span>
</code></pre></div><p>Read a boolean <strong>Returns:</strong> Boolean read</p><h3 id="writeboolean" tabindex="-1"><a class="header-anchor" href="#writeboolean" aria-hidden="true">#</a> writeBoolean</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">writeBoolean</span><span class="token punctuation">(</span><span class="token keyword">bool</span> boolean<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token operator">!&gt;</span> <span class="token class-name">WriteWhileReadingError</span>
</code></pre></div><p>Write a boolean</p><ul><li><strong><code>boolean</code>:</strong> Boolean to write</li></ul><h3 id="readint" tabindex="-1"><a class="header-anchor" href="#readint" aria-hidden="true">#</a> readInt</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">int</span><span class="token operator">?</span>
</code></pre></div><p>Read a integer <strong>Returns:</strong> Integer read</p><h3 id="writeint" tabindex="-1"><a class="header-anchor" href="#writeint" aria-hidden="true">#</a> writeInt</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token operator">!&gt;</span> <span class="token class-name">WriteWhileReadingError</span>
</code></pre></div><p>Write an integer</p><ul><li><strong><code>number</code>:</strong> Integer to write</li></ul><h3 id="readfloat" tabindex="-1"><a class="header-anchor" href="#readfloat" aria-hidden="true">#</a> readFloat</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">readFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">float</span><span class="token operator">?</span>
</code></pre></div><p>Read a float <strong>Returns:</strong> Float read</p><h3 id="writefloat" tabindex="-1"><a class="header-anchor" href="#writefloat" aria-hidden="true">#</a> writeFloat</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">writeFloat</span><span class="token punctuation">(</span><span class="token keyword">float</span> number<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token operator">!&gt;</span> <span class="token class-name">WriteWhileReadingError</span>
</code></pre></div><p>Write an float</p><ul><li><strong><code>number</code>:</strong> Float to write</li></ul><h3 id="len" tabindex="-1"><a class="header-anchor" href="#len" aria-hidden="true">#</a> len</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">int</span>
</code></pre></div><p>Get buffer length <strong>Returns:</strong> Buffer length</p><h3 id="cursor" tabindex="-1"><a class="header-anchor" href="#cursor" aria-hidden="true">#</a> cursor</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">cursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">int</span>
</code></pre></div><p>Get current position in the buffer <strong>Returns:</strong> Current position</p><h3 id="empty" tabindex="-1"><a class="header-anchor" href="#empty" aria-hidden="true">#</a> empty</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span>
</code></pre></div><p>Empty the buffer (retains capacity)</p><h3 id="tostring" tabindex="-1"><a class="header-anchor" href="#tostring" aria-hidden="true">#</a> toString</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">str</span>
</code></pre></div><p>Get buffer content as a string <strong>Returns:</strong> Buffer content</p><h3 id="at" tabindex="-1"><a class="header-anchor" href="#at" aria-hidden="true">#</a> at</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">at</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">int</span> <span class="token operator">!&gt;</span> <span class="token class-name">OutOfBoundError</span>
</code></pre></div><p>Get byte at given index</p><ul><li><strong><code>index</code>:</strong> Which byte to get <strong>Returns:</strong> Byte</li></ul><h3 id="setat" tabindex="-1"><a class="header-anchor" href="#setat" aria-hidden="true">#</a> setAt</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">setAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token operator">!&gt;</span> <span class="token class-name">WriteWhileReadingError</span><span class="token punctuation">,</span> <span class="token class-name">OutOfBoundError</span>
</code></pre></div><p>Set byte at given index</p><ul><li><strong><code>index</code>:</strong> Which byte to set</li><li><strong><code>value</code>:</strong> Value to set</li></ul>`,62),r=[o];function p(c,l){return n(),s("div",null,r)}const i=a(t,[["render",p],["__file","buffer.html.vue"]]);export{i as default};
