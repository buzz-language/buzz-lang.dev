import{_ as n,o as s,c as a,a as t}from"./app-30a05bfa.js";const p={},o=t(`<h1 id="buzz-api" tabindex="-1"><a class="header-anchor" href="#buzz-api" aria-hidden="true">#</a> Buzz API</h1><p>First, define the buzz interface. The <code>extern</code> keyword means that buzz will look for a dynamic library named <code>libmylib.dylib/so/dll</code>:</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token comment">// mylib.buzz</span>
<span class="token keyword">export</span> <span class="token keyword">extern</span> <span class="token keyword">fun</span> <span class="token function">assert</span><span class="token punctuation">(</span>condition<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span>
</code></pre></div><p>Then implement it in Zig or C using the buzz API:</p><div class="language-zig" data-ext="zig"><pre class="language-zig"><code><span class="token comment">// buzz_mylib.zig</span>
final std <span class="token operator">=</span> <span class="token builtin">@import</span><span class="token punctuation">(</span><span class="token string">&quot;std&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
final api <span class="token operator">=</span> <span class="token builtin">@import</span><span class="token punctuation">(</span><span class="token string">&quot;buzz_api.zig&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// The function must always have this signature</span>
<span class="token comment">// It returns: </span>
<span class="token comment">//     - 0 if no return value</span>
<span class="token comment">//     - 1 if there&#39;s a return value (that you must push on the stack before returning)</span>
<span class="token comment">//     - -1 if there&#39;s an error (that you also push on the stack before returning)</span>
<span class="token keyword">export</span> <span class="token keyword">fn</span> <span class="token function">assert</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>api<span class="token punctuation">.</span>NativeCtx</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">c_int</span></span> <span class="token punctuation">{</span>
    final condition<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">bool</span></span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">bz_peek</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ctx<span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">bz_throw</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">bz_peek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Build a dynamic library for it and you can use it in your buzz code:</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token comment">// main.buzz</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&quot;mylib&quot;</span></span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>_<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token number">1 </span><span class="token operator">+</span> <span class="token number">1 </span><span class="token operator">==</span> <span class="token number">2,</span> message<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Congrats on doing math!&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>The API is no yet stable and moves a lot. That&#39;s why you won&#39;t find any documentation for it here.</p></div>`,8),e=[o];function c(u,l){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","calling-native-code.html.vue"]]);export{k as default};
