import{_ as a,o as s,c as n,a as e}from"./app-ae46e271.js";const t={},o=e(`<h1 id="debug" tabindex="-1"><a class="header-anchor" href="#debug" aria-hidden="true">#</a> debug</h1><h2 id="dump" tabindex="-1"><a class="header-anchor" href="#dump" aria-hidden="true">#</a> dump</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">dump</span><span class="token punctuation">(</span><span class="token keyword">any</span> value<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> 
</code></pre></div><p>Dump any value to stdout</p><h2 id="ast" tabindex="-1"><a class="header-anchor" href="#ast" aria-hidden="true">#</a> ast</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">ast</span><span class="token punctuation">(</span><span class="token keyword">str</span> source<span class="token punctuation">,</span> <span class="token keyword">str</span> scriptName<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">str</span> <span class="token operator">!&gt;</span> <span class="token class-name">CompileError</span> 
</code></pre></div><p>Parse <code>source</code> and return the abstract syntax tree in JSON</p><ul><li><strong><code>script</code>:</strong> name (used to fetch eventual functions)</li></ul><p><strong>Returns:</strong> AST as JSON string</p>`,9),c=[o];function p(r,d){return s(),n("div",null,c)}const l=a(t,[["render",p],["__file","debug.html.vue"]]);export{l as default};
