import{_ as t,o as n,c as a,a as s}from"./app-edbb147f.js";const d={},e=s(`<h1 id="error-handling" tabindex="-1"><a class="header-anchor" href="#error-handling" aria-hidden="true">#</a> Error handling</h1><h2 id="throw-an-error" tabindex="-1"><a class="header-anchor" href="#throw-an-error" aria-hidden="true">#</a> Throw an error</h2><p>Any type of value can be thrown. Error can&#39;t be raised in the global scope. <code>test</code> functions ignore errors.</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">throw</span> <span class="token string-literal"><span class="token string">&quot;This failed&quot;</span></span><span class="token punctuation">;</span>

<span class="token keyword">enum</span><span class="token punctuation">(</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token class-name">MyErrors</span> <span class="token punctuation">{</span>
    failed <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Something failed&quot;</span></span><span class="token punctuation">,</span>
    bad <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Something bad&quot;</span></span><span class="token punctuation">,</span>
    ohno <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Oh no!&quot;</span></span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">throw</span> <span class="token class-name">MyErrors</span><span class="token punctuation">.</span>ohno<span class="token punctuation">;</span>
</code></pre></div><p>When throwing an object instance, if the object has a <code>str message</code> field, its content will be printed instead of the object name.</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">throw</span> <span class="token punctuation">.</span><span class="token punctuation">{</span> message <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Something&#39;s wrong&quot;</span></span> <span class="token punctuation">}</span> <span class="token comment">| -&gt; Error: Something&#39;s wrong</span>
<span class="token keyword">throw</span> <span class="token class-name">SomeObject</span><span class="token punctuation">{</span> number <span class="token operator">=</span> <span class="token number">12</span> <span class="token punctuation">}</span>          <span class="token comment">| -&gt; Error: object instance 0x1feb12 \`SomeObject\`</span>
</code></pre></div><h2 id="function-signatures" tabindex="-1"><a class="header-anchor" href="#function-signatures" aria-hidden="true">#</a> Function signatures</h2><p>Functions must specify which error they can raise with <code>!&gt; type1, type2, ...</code>. The compiler will detect any unhandled error and require you to either specify it in the function signature or catch the error.</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">willFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">int</span> <span class="token operator">!&gt;</span> <span class="token class-name">MyErrors</span><span class="token punctuation">,</span> <span class="token class-name">OtherErrors</span><span class="token punctuation">,</span> <span class="token keyword">str</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> random <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>random <span class="token operator">==</span> <span class="token number">1)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token class-name">MyErrors</span><span class="token punctuation">.</span>failed<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>random <span class="token operator">==</span> <span class="token number">0)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token class-name">OtherErrors</span><span class="token punctuation">.</span>failed<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">throw</span> <span class="token string-literal"><span class="token string">&quot;something else&quot;</span></span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>When calling a function that can throw an error, you can choose to discard the error by providing a default value.</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token comment">| If \`willFail\` throws an error, \`0\` will be returned</span>
<span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">willFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">catch</span> <span class="token number">0;</span>
</code></pre></div><h2 id="try-catch" tabindex="-1"><a class="header-anchor" href="#try-catch" aria-hidden="true">#</a> Try/catch</h2><p>Try/catch works as you would expect. If you omit the error type, it&#39;ll catch any error.</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token function">willFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token keyword">str</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Caught error </span><span class="token interpolation">{error}</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Catches everything&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="compile-errors" tabindex="-1"><a class="header-anchor" href="#compile-errors" aria-hidden="true">#</a> Compile errors</h2><p>Possible compile errors are:</p><table><thead><tr><th>Code</th><th>Short name</th><th>Meaning</th></tr></thead><tbody><tr><td>0</td><td>already_conforming_protocol</td><td>Object conforms to the same protocol more than once</td></tr><tr><td>1</td><td>arguments_count</td><td>Functions has too many arguments (255 maximum)</td></tr><tr><td>2</td><td>arithmetic_operand_type</td><td>Binary or unary operator operands have unexpected or non-matching types</td></tr><tr><td>3</td><td>assignable</td><td>Tried to assign value to something not assignable</td></tr><tr><td>4</td><td>assignment_value_type</td><td>Assigned value of the wrong type</td></tr><tr><td>5</td><td>binary_operand_type</td><td>Binary operands have unexpected or non-matching types</td></tr><tr><td>6</td><td>bitwise_operand_type</td><td>Bitwise operands have unexpected or non-matching types</td></tr><tr><td>7</td><td>block_too_large</td><td><code>try</code>/<code>catch</code> block is too large</td></tr><tr><td>8</td><td>call_argument_type</td><td>Function argument have unexpected or non-matching types</td></tr><tr><td>9</td><td>call_arguments</td><td>Function call has too many, not enough or unexpected arguments</td></tr><tr><td>10</td><td>callable</td><td>Value called is not callable</td></tr><tr><td>11</td><td>closures_count</td><td>Too many closures defined in a function (255 maximum)</td></tr><tr><td>12</td><td>comparison_operand_type</td><td>Comparison operands have unexpected or non-matching types</td></tr><tr><td>13</td><td>compile</td><td>Imported script does not compile</td></tr><tr><td>14</td><td>constant_default</td><td>Object property default value or function argument default value is not constant</td></tr><tr><td>15</td><td>constant</td><td>Tried to assign value to a constant</td></tr><tr><td>16</td><td>do_condition_type</td><td><code>do</code></td></tr><tr><td>17</td><td>enum_argument</td><td>Enum instanciation with 0 or more than 1 value</td></tr><tr><td>18</td><td>enum_case_type</td><td>Bad enum case value</td></tr><tr><td>19</td><td>enum_case</td><td>Enum case does not exists</td></tr><tr><td>20</td><td>enum_cases_count</td><td>Too little or too many enum cases (1 minimum, 255 maximum)</td></tr><tr><td>21</td><td>error_not_handled</td><td>An error type is not</td></tr><tr><td>22</td><td>error_type</td><td>Error type can&#39;t be optional</td></tr><tr><td>23</td><td>expected_object</td><td>Tried to instanciate something other that an object or foreign struct</td></tr><tr><td>24</td><td>export_count</td><td>Too many export statement (16777215 maximum)</td></tr><tr><td>25</td><td>extern_main</td><td>Main function can&#39;t be <code>extern</code></td></tr><tr><td>26</td><td>fiber_call_not_allowed</td><td>Tried to async call something other than a function</td></tr><tr><td>27</td><td>fiber</td><td>Tried to resume something other than a fiber</td></tr><tr><td>28</td><td>field_access</td><td>Value is not field accessible</td></tr><tr><td>29</td><td>for_condition_type</td><td><code>for</code> condition should be <code>bool</code></td></tr><tr><td>30</td><td>foreach_iterable</td><td>Value is not iterable</td></tr><tr><td>31</td><td>foreach_key_type</td><td></td></tr><tr><td>32</td><td>foreach_value_type</td><td></td></tr><tr><td>33</td><td>generic_type</td><td></td></tr><tr><td>34</td><td>global_initializer</td><td></td></tr><tr><td>35</td><td>globals_count</td><td></td></tr><tr><td>36</td><td>if_condition_type</td><td></td></tr><tr><td>37</td><td>inline_catch_type</td><td></td></tr><tr><td>38</td><td>inline_if_body_type</td><td></td></tr><tr><td>39</td><td>inline_if_else_type</td><td></td></tr><tr><td>40</td><td>jump_too_large</td><td></td></tr><tr><td>41</td><td>library_not_found</td><td></td></tr><tr><td>42</td><td>list_item_type</td><td></td></tr><tr><td>43</td><td>local_initializer</td><td></td></tr><tr><td>44</td><td>locals_count</td><td></td></tr><tr><td>45</td><td>logical_operand_type</td><td></td></tr><tr><td>46</td><td>loop_body_too_large</td><td></td></tr><tr><td>47</td><td>main_signature</td><td></td></tr><tr><td>48</td><td>map_key_type</td><td></td></tr><tr><td>49</td><td>map_value_type</td><td></td></tr><tr><td>50</td><td>missing_return</td><td></td></tr><tr><td>51</td><td>nested_try</td><td></td></tr><tr><td>52</td><td>no_error</td><td></td></tr><tr><td>53</td><td>optional</td><td></td></tr><tr><td>54</td><td>pattern</td><td></td></tr><tr><td>55</td><td>property_already_exists</td><td></td></tr><tr><td>56</td><td>property_default_value</td><td></td></tr><tr><td>57</td><td>property_does_not_exists</td><td></td></tr><tr><td>58</td><td>property_not_initialized</td><td></td></tr><tr><td>59</td><td>property_type</td><td></td></tr><tr><td>60</td><td>protocol_conforming</td><td></td></tr><tr><td>61</td><td>protocols_count</td><td></td></tr><tr><td>62</td><td>range_type</td><td></td></tr><tr><td>63</td><td>raw_char</td><td></td></tr><tr><td>64</td><td>resolvable</td><td></td></tr><tr><td>65</td><td>resumable</td><td></td></tr><tr><td>66</td><td>return_type</td><td></td></tr><tr><td>67</td><td>runtime</td><td></td></tr><tr><td>68</td><td>script_not_found</td><td></td></tr><tr><td>69</td><td>shadowed_global</td><td></td></tr><tr><td>70</td><td>subscript_key_type</td><td></td></tr><tr><td>71</td><td>subscript_value_type</td><td></td></tr><tr><td>72</td><td>subscriptable</td><td></td></tr><tr><td>73</td><td>symbol_not_found</td><td></td></tr><tr><td>74</td><td>syntax</td><td></td></tr><tr><td>75</td><td>undefined</td><td></td></tr><tr><td>76</td><td>unexpected_error_type</td><td></td></tr><tr><td>77</td><td>unknown_import</td><td></td></tr><tr><td>78</td><td>unknown</td><td></td></tr><tr><td>79</td><td>variable_already_exists</td><td></td></tr><tr><td>80</td><td>while_condition_type</td><td></td></tr><tr><td>81</td><td>yield_not_allowed</td><td></td></tr><tr><td>82</td><td>yield_type</td><td></td></tr><tr><td>83</td><td>zdef</td><td></td></tr><tr><td>84</td><td>any_generic</td><td></td></tr><tr><td>85</td><td>collect_signature</td><td></td></tr><tr><td>86</td><td>tostring_signature</td><td></td></tr><tr><td>87</td><td>gc</td><td></td></tr></tbody></table>`,17),o=[e];function r(p,c){return n(),a("div",null,o)}const i=t(d,[["render",r],["__file","errors.html.vue"]]);export{i as default};
