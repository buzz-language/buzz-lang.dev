import{_ as n,o as s,c as a,a as t}from"./app-167f3d5b.js";const e={},o=t(`<h1 id="fibers" tabindex="-1"><a class="header-anchor" href="#fibers" aria-hidden="true">#</a> Fibers</h1><p>Similar to Lua&#39;s coroutines. Buzz&#39;s fibers have their own state and stack and can be switched in and out from. Fibers can yield from within any call depth. Any function can be wrapped in a fiber. Unlike Lua, <code>yield</code> are evaluated and dismissed if a function is not called within a fiber and do not raise an error. <code>resolve</code> allows to run a fiber until completion without stopping for any <code>yield</code>. It can be called after the fiber is over in order to get the wrapped function return value.</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token comment">| Returns a string, yields numbers</span>
<span class="token comment">| Always yields an optional type because null is returned if you resume a terminated fiber</span>
<span class="token keyword">fun</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">str</span> <span class="token operator">*&gt;</span> <span class="token keyword">int</span><span class="token operator">?</span> <span class="token punctuation">{</span>  
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1)</span> <span class="token punctuation">{</span>
        <span class="token comment">| If the function is not called in a fiber, yields are evaluated and dismissed</span>
        <span class="token comment">| Otherwise the value is returned as \`resume\` result</span>
        _ <span class="token operator">=</span> <span class="token keyword">yield</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;Counting is done!&quot;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">str</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token comment">| Wraps the call to \`count\` in a fiber, however the fiber is not started until a \`resolve\` or \`resume\` instruction</span>
    <span class="token keyword">fib</span><span class="token operator">&lt;</span><span class="token keyword">str</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">?&gt;</span> counter <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>counter<span class="token punctuation">.</span><span class="token function">over</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">| resume returns null if nothing was yielded and/or fiber is over</span>
        sum <span class="token operator">=</span> sum <span class="token operator">+</span> <span class="token keyword">resume</span> counter <span class="token operator">??</span> <span class="token number">0;</span>
    <span class="token punctuation">}</span>

    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token keyword">resolve</span> counter <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;Counting is done!&quot;</span></span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;resolve returns fiber return value&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,3),p=[o];function c(r,l){return s(),a("div",null,p)}const u=n(e,[["render",c],["__file","fibers.html.vue"]]);export{u as default};
