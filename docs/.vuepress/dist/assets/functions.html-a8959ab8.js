import{_ as p,b as c,o as u,c as l,e as s,f as n,k as e,l as o,a}from"./app-82c48830.js";const i={},r=a(`<h1 id="functions" tabindex="-1"><a class="header-anchor" href="#functions" aria-hidden="true">#</a> Functions</h1><p>Functions start with the keyword <code>fun</code>. The return type must be specified after a <code>&gt;</code>. If the functions returns nothing the return type is <code>void</code>.</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">sayHiTo</span><span class="token punctuation">(</span><span class="token keyword">str</span> name<span class="token punctuation">,</span> <span class="token keyword">str</span><span class="token operator">?</span> lastName<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">str</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;Hi </span><span class="token interpolation">{name}</span><span class="token string"> {lastName ?? &quot;</span></span><span class="token string-literal"><span class="token string">&quot;}!&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre></div>`,3),k=s("code",null,">",-1),d=a(`<div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">mayYield</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">str</span> <span class="token operator">*&gt;</span> <span class="token keyword">int</span><span class="token operator">?</span> <span class="token punctuation">{</span>
    <span class="token comment">|...</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="arrow-function" tabindex="-1"><a class="header-anchor" href="#arrow-function" aria-hidden="true">#</a> Arrow function</h2><p>Function which body would only be <code>return &lt;expression&gt;</code> can be written with an arrow function. Arrow functions can omit their return type which will be inferred from the expression returned.</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">str</span> name<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> name<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="arguments" tabindex="-1"><a class="header-anchor" href="#arguments" aria-hidden="true">#</a> Arguments</h2><p>buzz makes the opinionated choice that any function argument after the first one needs to be labeled for readability. That&#39;s why, when called, only the first argument name of a function can be omitted. Argument order is not required so long as they are named.</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token function">sayHiTo</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Joe&quot;</span></span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">35</span><span class="token punctuation">,</span> lastName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Doe&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">| -&gt; &quot;Hi Joe Doe!&quot;</span>
</code></pre></div><p>Arguments with default value can be omitted completely:</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">bool</span> isAvailable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token comment">| ...</span>
<span class="token punctuation">}</span>

<span class="token comment">| Then calling it</span>
<span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>If the argument value is a variable with the same name as the argument, you can omit the name:</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">str</span> firstname<span class="token punctuation">,</span> <span class="token keyword">str</span> lastname<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token comment">| ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> lastname <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Doe&quot;</span></span><span class="token punctuation">;</span>
<span class="token function">call</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;joe&quot;</span></span><span class="token punctuation">,</span> lastname<span class="token punctuation">)</span>
</code></pre></div><h2 id="errors" tabindex="-1"><a class="header-anchor" href="#errors" aria-hidden="true">#</a> Errors</h2>`,12),g=s("code",null,"!>",-1),h=a(`<div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">somethingThatCanFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">str</span> <span class="token operator">!&gt;</span> <span class="token class-name">FormatError</span><span class="token punctuation">,</span> <span class="token class-name">UnexpectedError</span> <span class="token punctuation">{</span>
    <span class="token comment">| ...</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="first-class-citizen" tabindex="-1"><a class="header-anchor" href="#first-class-citizen" aria-hidden="true">#</a> First-class citizen</h2><p>Functions are first-class citizens. Meaning they can be passed around just like any other buzz value:</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token function">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> fn <span class="token operator">=</span> <span class="token keyword">fun</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token operator">-&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;hello world&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">| Arrow function</span>

<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">| -&gt; &quot;hello world&quot;</span>
</code></pre></div><h2 id="extern-functions" tabindex="-1"><a class="header-anchor" href="#extern-functions" aria-hidden="true">#</a> Extern functions</h2>`,5),m=s("code",null,"extern",-1),f=a(`<div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">extern</span> <span class="token keyword">fun</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token keyword">bool</span> condition<span class="token punctuation">,</span> <span class="token keyword">str</span> message<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="main" tabindex="-1"><a class="header-anchor" href="#main" aria-hidden="true">#</a> <code>main</code></h2><p>The <code>main</code> function is the entry point of your program. Its signature must be.</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">str</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">int</span> <span class="token punctuation">{</span>
    <span class="token comment">|...</span>
<span class="token punctuation">}</span>

<span class="token comment">| or</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">str</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token comment">|...</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="test" tabindex="-1"><a class="header-anchor" href="#test" aria-hidden="true">#</a> <code>test</code></h2><p><code>test</code> blocks are functions that will be executed when invoked with <code>buzz --test</code>.</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">test</span> <span class="token string-literal"><span class="token string">&quot;Some test&quot;</span></span> <span class="token punctuation">{</span>
    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">something</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Could use \`something\`&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="generic-types" tabindex="-1"><a class="header-anchor" href="#generic-types" aria-hidden="true">#</a> Generic types</h2><p>Generic types can be used by listing them just after the function name:</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> countMap<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">K</span><span class="token punctuation">:</span> <span class="token class-name">V</span><span class="token punctuation">}</span> map<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">int</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">{</span><span class="token keyword">str</span><span class="token punctuation">:</span> <span class="token keyword">int</span><span class="token punctuation">}</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-literal"><span class="token string">&quot;one&quot;</span></span><span class="token punctuation">:</span> <span class="token number">1,</span>
    <span class="token string-literal"><span class="token string">&quot;two&quot;</span></span><span class="token punctuation">:</span> <span class="token number">2,</span>
    <span class="token string-literal"><span class="token string">&quot;three&quot;</span></span><span class="token punctuation">:</span> <span class="token number">3,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

countMap<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token keyword">str</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3;</span>
</code></pre></div>`,10);function z(b,y){const t=c("RouterLink");return u(),l("div",null,[r,s("p",null,[n("If the function can yield (see "),e(t,{to:"/guide/fibers.html"},{default:o(()=>[n("Fibers")]),_:1}),n(") or contains a function call to another function that can yield, the yield type must be specified after another "),k,n(".")]),d,s("p",null,[n("Any uncaught error type that can arise within the function must be specified in its signature after "),g,n(" (see "),e(t,{to:"/guide/errors.html"},{default:o(()=>[n("Errors")]),_:1}),n("):")]),h,s("p",null,[n("Functions that refers to a C/Zig function, are prefixed with "),m,n(" (see "),e(t,{to:"/guide/calling-native-code.html"},{default:o(()=>[n("Calling C/Zig functions")]),_:1}),n(")")]),f])}const v=p(i,[["render",z],["__file","functions.html.vue"]]);export{v as default};
