import{_ as e,b as o,o as p,c,e as s,f as n,k as l,l as i,a}from"./app-30a05bfa.js";const u={},r=a(`<h1 id="import-export" tabindex="-1"><a class="header-anchor" href="#import-export" aria-hidden="true">#</a> Import/Export</h1><h2 id="import" tabindex="-1"><a class="header-anchor" href="#import" aria-hidden="true">#</a> Import</h2><p>To import another script, use the <code>import</code> statement:</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&quot;std&quot;</span></span><span class="token punctuation">;</span>

std<span class="token punctuation">\\</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>When importing, buzz will search the script in common places. With <code>?</code> being the library name:</p><ul><li><code>./?.buzz</code></li><li><code>./?/main.buzz</code></li><li><code>./?/src/main.buzz</code></li><li><code>./?/src/?.buzz</code></li><li><code>/usr/share/buzz/?.buzz</code></li><li><code>/usr/share/buzz/?/main.buzz</code></li><li><code>/usr/share/buzz/?/src/main.buzz</code></li><li><code>/usr/share/buzz/?/src/?.buzz</code></li><li><code>/usr/local/share/buzz/?.buzz</code></li><li><code>/usr/local/share/buzz/?/main.buzz</code></li><li><code>/usr/local/share/buzz/?/src/main.buzz</code></li><li><code>/usr/local/share/buzz/?/src/?.buzz</code></li><li><code>$BUZZ_PATH/?.buzz</code></li><li><code>$BUZZ_PATH/?/main.buzz</code></li><li><code>$BUZZ_PATH/?/src/?.buzz</code></li><li><code>$BUZZ_PATH/?/src/main.buzz</code></li></ul>`,6),d=s("code",null,"extern",-1),k=a(`<ul><li><code>./?.so</code></li><li><code>./?/src/lib?.so</code></li><li><code>/usr/share/so/lib?.so</code></li><li><code>/usr/share/so/lib?/src/?.so</code></li><li><code>/usr/local/share/so/lib?.so</code></li><li><code>/usr/local/share/so/lib?/src/?.so</code></li><li><code>$BUZZ_PATH/lib?.so</code></li><li><code>$BUZZ_PATH/?/src/lib?.so</code></li></ul><h3 id="alias" tabindex="-1"><a class="header-anchor" href="#alias" aria-hidden="true">#</a> Alias</h3><p>You can rename the imported namespace like so:</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&quot;std&quot;</span></span> <span class="token keyword">as</span> standard<span class="token punctuation">;</span>

<span class="token comment">// ...</span>

standard<span class="token punctuation">\\</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>You can also erase the namespace:</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&quot;std&quot;</span></span> <span class="token keyword">as</span> _<span class="token punctuation">;</span>

<span class="token comment">// ...</span>

<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="exporting" tabindex="-1"><a class="header-anchor" href="#exporting" aria-hidden="true">#</a> Exporting</h2><p>To export symbols, use the <code>export</code> statement. If your script exports at least one symbol. You have to define a namespace for the script:</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token comment">// hello.buzz</span>
<span class="token keyword">namespace</span> hello<span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">fun</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    std<span class="token punctuation">\\</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello world!&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token comment">// main.buzz</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">;</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>_<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    hello<span class="token punctuation">\\</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>You can also put <code>export</code> right before the declaration:</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">export</span> <span class="token keyword">fun</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello world!&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="namespace" tabindex="-1"><a class="header-anchor" href="#namespace" aria-hidden="true">#</a> Namespace</h3><p>A namespace is any number of identifiers separated by <code>\\</code>. It must be the first statement of a script and is required if the script exports at least one symbol:</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">namespace</span> some<span class="token punctuation">\\</span>valid<span class="token punctuation">\\</span>name<span class="token punctuation">;</span>
</code></pre></div><h3 id="alias-1" tabindex="-1"><a class="header-anchor" href="#alias-1" aria-hidden="true">#</a> Alias</h3><p>You can export a declaration with another name.</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token comment">// hello.buzz</span>
<span class="token keyword">fun</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    std<span class="token punctuation">\\</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello world!&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> sayHello <span class="token keyword">as</span> hello<span class="token punctuation">;</span>
</code></pre></div><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token comment">// main.buzz</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">;</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    hello<span class="token punctuation">\\</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,19);function z(h,b){const t=o("RouterLink");return p(),c("div",null,[r,s("p",null,[n("When defining "),l(t,{to:"/guide/calling-native-code.html"},{default:i(()=>[d,n(" functions")]),_:1}),n(", buzz will search the symbol in a dynamic library. It'll be searched in the same common places:")]),k])}const g=e(u,[["render",z],["__file","import-export.html.vue"]]);export{g as default};
