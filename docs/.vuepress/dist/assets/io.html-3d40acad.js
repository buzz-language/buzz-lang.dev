import{_ as a,o as s,c as n,a as e}from"./app-ae46e271.js";const t={},o=e(`<h1 id="io" tabindex="-1"><a class="header-anchor" href="#io" aria-hidden="true">#</a> io</h1><h2 id="filemode" tabindex="-1"><a class="header-anchor" href="#filemode" aria-hidden="true">#</a> FileMode</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">enum</span> <span class="token class-name">FileMode</span> <span class="token punctuation">{</span>
    read<span class="token punctuation">,</span>
    write<span class="token punctuation">,</span>
    update<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><p>File mode with which you can open a file</p><h2 id="file" tabindex="-1"><a class="header-anchor" href="#file" aria-hidden="true">#</a> File</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">object</span> <span class="token class-name">File</span> 
</code></pre></div><p>Object to manipulate an opened file</p><h3 id="open" tabindex="-1"><a class="header-anchor" href="#open" aria-hidden="true">#</a> open</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">static</span> <span class="token keyword">fun</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">str</span> filename<span class="token punctuation">,</span> <span class="token class-name">FileMode</span> mode<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token class-name">File</span> <span class="token operator">!&gt;</span> <span class="token class-name">FileSystemError</span><span class="token punctuation">,</span> <span class="token class-name">UnexpectedError</span>
</code></pre></div><p>Open file</p><ul><li><strong><code>filename</code>:</strong> Path of file to open</li><li><strong><code>mode</code>:</strong> Mode with which to open it <strong>Returns:</strong> opened file</li></ul><h3 id="collect" tabindex="-1"><a class="header-anchor" href="#collect" aria-hidden="true">#</a> collect</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span>
</code></pre></div><p>Close file. Automatically called by Garbage Collector.</p><h3 id="close" tabindex="-1"><a class="header-anchor" href="#close" aria-hidden="true">#</a> close</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span>
</code></pre></div><p>Close file</p><h3 id="readall" tabindex="-1"><a class="header-anchor" href="#readall" aria-hidden="true">#</a> readAll</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">str</span> <span class="token operator">!&gt;</span> <span class="token class-name">ReadWriteError</span><span class="token punctuation">,</span> <span class="token class-name">FileSystemError</span><span class="token punctuation">,</span> <span class="token class-name">UnexpectedError</span>
</code></pre></div><p>Reads file until <code>EOF</code><strong>Returns:</strong> read data</p><h3 id="readline" tabindex="-1"><a class="header-anchor" href="#readline" aria-hidden="true">#</a> readLine</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">str</span><span class="token operator">?</span> <span class="token operator">!&gt;</span> <span class="token class-name">ReadWriteError</span><span class="token punctuation">,</span> <span class="token class-name">FileSystemError</span><span class="token punctuation">,</span> <span class="token class-name">UnexpectedError</span>
</code></pre></div><p>Reads next line, returns null if nothing to read <strong>Returns:</strong> read data</p><h3 id="read" tabindex="-1"><a class="header-anchor" href="#read" aria-hidden="true">#</a> read</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">str</span><span class="token operator">?</span> <span class="token operator">!&gt;</span> <span class="token class-name">ReadWriteError</span><span class="token punctuation">,</span> <span class="token class-name">FileSystemError</span><span class="token punctuation">,</span> <span class="token class-name">InvalidArgumentError</span><span class="token punctuation">,</span> <span class="token class-name">UnexpectedError</span>
</code></pre></div><p>Reads <code>n</code> bytes, returns null if nothing to read</p><ul><li><strong><code>n</code>:</strong> how many bytes to read <strong>Returns:</strong> read data</li></ul><h3 id="write" tabindex="-1"><a class="header-anchor" href="#write" aria-hidden="true">#</a> write</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">str</span> bytes<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token operator">!&gt;</span> <span class="token class-name">FileSystemError</span><span class="token punctuation">,</span> <span class="token class-name">ReadWriteError</span><span class="token punctuation">,</span> <span class="token class-name">UnexpectedError</span>
</code></pre></div><p>Write bytes</p><ul><li><strong><code>bytes</code>:</strong> string to write</li></ul><h3 id="istty" tabindex="-1"><a class="header-anchor" href="#istty" aria-hidden="true">#</a> isTTY</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">isTTY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">bool</span>
</code></pre></div><p><strong>Returns:</strong> <code>true</code> if <code>File</code> is a terminal</p><h2 id="stdin" tabindex="-1"><a class="header-anchor" href="#stdin" aria-hidden="true">#</a> stdin</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">const</span> <span class="token class-name">File</span> stdin
</code></pre></div><h2 id="stdout" tabindex="-1"><a class="header-anchor" href="#stdout" aria-hidden="true">#</a> stdout</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">const</span> <span class="token class-name">File</span> stdout
</code></pre></div><h2 id="stderr" tabindex="-1"><a class="header-anchor" href="#stderr" aria-hidden="true">#</a> stderr</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">const</span> <span class="token class-name">File</span> stderr
</code></pre></div><h2 id="runfile" tabindex="-1"><a class="header-anchor" href="#runfile" aria-hidden="true">#</a> runFile</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">runFile</span><span class="token punctuation">(</span><span class="token keyword">str</span> filename<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token operator">!&gt;</span> <span class="token class-name">CompileError</span><span class="token punctuation">,</span> <span class="token class-name">InterpretError</span><span class="token punctuation">,</span> <span class="token class-name">FileSystemError</span><span class="token punctuation">,</span> <span class="token class-name">ReadWriteError</span> 
</code></pre></div><p>Run a buzz file</p><ul><li><strong><code>filename</code>:</strong> path to buzz file</li></ul>`,44),p=[o];function c(l,r){return s(),n("div",null,p)}const i=a(t,[["render",c],["__file","io.html.vue"]]);export{i as default};
