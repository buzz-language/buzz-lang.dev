import{_ as n,o as a,c as s,a as e}from"./app-02bc016f.js";const t={},o=e(`<h1 id="lists" tabindex="-1"><a class="header-anchor" href="#lists" aria-hidden="true">#</a> Lists</h1><h2 id="append" tabindex="-1"><a class="header-anchor" href="#append" aria-hidden="true">#</a> append</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token class-name">T</span>
</code></pre></div><p>Append new element at end of the list</p><ul><li><strong><code>value</code></strong>: New element</li></ul><p><strong>Returns:</strong> The appended value</p><h2 id="insert" tabindex="-1"><a class="header-anchor" href="#insert" aria-hidden="true">#</a> insert</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token class-name">T</span>
</code></pre></div><p>Insert new element at <code>index</code> of the list. If <code>index</code> is less than <code>0</code>, element will be inserted at <code>0</code>. If <code>index</code> is greather than list length, it&#39;ll be appended at the end of the list.</p><ul><li><strong><code>index</code></strong>: Index at which element will be inserted</li><li><strong><code>value</code></strong>: New element</li></ul><p><strong>Returns:</strong> The inserted value</p><h2 id="remove" tabindex="-1"><a class="header-anchor" href="#remove" aria-hidden="true">#</a> remove</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> at<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token class-name">T</span>
</code></pre></div><p>Remove element form the list shifting elements after index</p><ul><li><strong><code>at</code></strong>: Index of element to remove</li></ul><p><strong>Returns:</strong> Removed element</p><h2 id="pop" tabindex="-1"><a class="header-anchor" href="#pop" aria-hidden="true">#</a> pop</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token class-name">T</span><span class="token operator">?</span>
</code></pre></div><p>Remove and return last element of list or <code>null</code> if list is empty</p><p><strong>Returns:</strong> Last element</p><h2 id="len" tabindex="-1"><a class="header-anchor" href="#len" aria-hidden="true">#</a> len</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">int</span>
</code></pre></div><p><strong>Returns:</strong> Length of list</p><h2 id="sub" tabindex="-1"><a class="header-anchor" href="#sub" aria-hidden="true">#</a> sub</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">?</span> len<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span>
</code></pre></div><p>Get sub list</p><ul><li><strong><code>start</code></strong>: Start index of sub list</li><li><strong><code>len</code></strong>: Length of sub list, if <code>null</code> will go to end of list</li></ul><p><strong>Returns:</strong> Sub list</p><h2 id="indexof" tabindex="-1"><a class="header-anchor" href="#indexof" aria-hidden="true">#</a> indexOf</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">T</span> needle<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">int</span><span class="token operator">?</span>
</code></pre></div><p>Search first occurence of the needle</p><ul><li><strong><code>needle</code></strong>: Element to find</li></ul><p><strong>Returns:</strong> Index of element or <code>null</code> if not found</p><h2 id="join" tabindex="-1"><a class="header-anchor" href="#join" aria-hidden="true">#</a> join</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">str</span> separator<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">str</span>
</code></pre></div><p>Join list element in a string with a separator. Elements are converted to a string just like an interpolation would.</p><ul><li><strong><code>separator</code></strong>: Separator to put between each elements</li></ul><p><strong>Returns:</strong> Elements joined as a string</p><h2 id="foreach" tabindex="-1"><a class="header-anchor" href="#foreach" aria-hidden="true">#</a> forEach</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">Function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">T</span> element<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span>
</code></pre></div><p>Runs <code>callback</code> for each element of the list.</p><ul><li><strong><code>callback</code>:</strong> Ran for each element</li></ul><h2 id="sort" tabindex="-1"><a class="header-anchor" href="#sort" aria-hidden="true">#</a> sort</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token class-name">T</span> left<span class="token punctuation">,</span> <span class="token class-name">T</span> right<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">bool</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span>
</code></pre></div><p>Stable in-place sort. O(n) best case, O(n*log(n)) worst case and average case.</p><ul><li><strong><code>callback</code>:</strong> Used to compare elements</li></ul><p><strong>Returns:</strong> The list now sorted</p><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> map</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token class-name">S</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">T</span> element<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token class-name">S</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token class-name">S</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>Map list to new list of target type by running <code>callback</code> for each element of the list.</p><ul><li><strong><code>callback</code>:</strong> Ran for each element</li></ul><p><strong>Returns:</strong> New list of item type <code>S</code></p><h2 id="filter" tabindex="-1"><a class="header-anchor" href="#filter" aria-hidden="true">#</a> filter</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">T</span> element<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">bool</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>Filter list keeping element for which <code>callback</code> returns <code>true</code>.</p><ul><li><strong><code>callback</code>:</strong> Ran for each element</li></ul><p><strong>Returns:</strong> Filtered list</p><h2 id="reduce" tabindex="-1"><a class="header-anchor" href="#reduce" aria-hidden="true">#</a> reduce</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token class-name">S</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">T</span> element<span class="token punctuation">,</span> <span class="token class-name">S</span> accumulator<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token class-name">S</span><span class="token punctuation">,</span> <span class="token class-name">S</span> initial<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token class-name">S</span><span class="token punctuation">)</span>
</code></pre></div><p>Reduce list to value of type <code>S</code> by running <code>callback</code> with <code>accumulator</code> being the value being built.</p><ul><li><strong><code>callback</code>:</strong> Ran for each element</li><li><strong><code>initial</code>:</strong> Initial value</li></ul><p><strong>Returns:</strong> Reduced value</p>`,62),p=[o];function c(l,r){return a(),s("div",null,p)}const u=n(t,[["render",c],["__file","lists.html.vue"]]);export{u as default};
