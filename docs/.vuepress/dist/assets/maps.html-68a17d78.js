import{_ as a,o as n,c as s,a as e}from"./app-82c48830.js";const t={},p=e(`<h1 id="maps" tabindex="-1"><a class="header-anchor" href="#maps" aria-hidden="true">#</a> Maps</h1><h2 id="size" tabindex="-1"><a class="header-anchor" href="#size" aria-hidden="true">#</a> size</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">int</span>
</code></pre></div><p><strong>Returns:</strong> Number of elements in the map</p><h2 id="remove" tabindex="-1"><a class="header-anchor" href="#remove" aria-hidden="true">#</a> remove</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token class-name">V</span><span class="token operator">?</span>
</code></pre></div><p>Remove element from the map</p><ul><li><strong>\`key\`\`</strong>: Key of element to remove</li></ul><p><strong>Returns:</strong> Removed element or <code>null</code> if nothing was under <code>key</code></p><h2 id="keys" tabindex="-1"><a class="header-anchor" href="#keys" aria-hidden="true">#</a> keys</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token class-name">K</span><span class="token punctuation">]</span>
</code></pre></div><p><strong>Returns:</strong> Return list of the map keys</p><h2 id="values" tabindex="-1"><a class="header-anchor" href="#values" aria-hidden="true">#</a> values</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token class-name">V</span><span class="token punctuation">]</span>
</code></pre></div><p><strong>Returns:</strong> Return list of the map values</p><h2 id="clone" tabindex="-1"><a class="header-anchor" href="#clone" aria-hidden="true">#</a> clone</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token class-name">K</span><span class="token punctuation">:</span> <span class="token class-name">V</span><span class="token punctuation">}</span>
</code></pre></div><p><strong>Returns:</strong> Clone of the map</p><h2 id="reduce" tabindex="-1"><a class="header-anchor" href="#reduce" aria-hidden="true">#</a> reduce</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> reduce<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token class-name">Function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token class-name">T</span> accumulator<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">T</span> initial<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token class-name">T</span>
</code></pre></div><p>Reduce map to value of type <code>T</code> by running <code>callback</code> with <code>accumulator</code> being the value being built.</p><ul><li><strong><code>callback</code>:</strong> Ran for each element</li><li><strong><code>initial</code>:</strong> Initial value</li></ul><p><strong>Returns:</strong> Reduced value</p><h2 id="filter" tabindex="-1"><a class="header-anchor" href="#filter" aria-hidden="true">#</a> filter</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">bool</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token class-name">K</span><span class="token punctuation">:</span> <span class="token class-name">V</span><span class="token punctuation">}</span>
</code></pre></div><p>Filter map keeping element for which <code>callback</code> returns <code>true</code>.</p><ul><li><strong><code>callback</code>:</strong> Ran for each element</li></ul><p><strong>Returns:</strong> Filtered map</p><h2 id="foreach" tabindex="-1"><a class="header-anchor" href="#foreach" aria-hidden="true">#</a> forEach</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">Function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span>
</code></pre></div><p>Runs <code>callback</code> for each element of the map.</p><ul><li><strong><code>callback</code>:</strong> Ran for each element</li></ul><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> map</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> map<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">B</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token class-name">Function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">obj</span><span class="token punctuation">{</span> <span class="token class-name">A</span> key<span class="token punctuation">,</span> <span class="token class-name">B</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token class-name">A</span><span class="token punctuation">:</span> <span class="token class-name">B</span><span class="token punctuation">}</span>
</code></pre></div><p>Transform map to new map of target type by running <code>callback</code> for each element of the map.</p><ul><li><strong><code>callback</code>:</strong> Ran for each element</li></ul><p><strong>Returns:</strong> New map of key type <code>A</code> and value type <code>B</code></p><h2 id="sort" tabindex="-1"><a class="header-anchor" href="#sort" aria-hidden="true">#</a> sort</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token class-name">K</span> left<span class="token punctuation">,</span> <span class="token class-name">K</span> right<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">bool</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token class-name">K</span><span class="token punctuation">:</span> <span class="token class-name">V</span><span class="token punctuation">}</span>
</code></pre></div><p>Stable in-place sort. O(n) best case, O(n*log(n)) worst case and average case.</p><ul><li><strong><code>callback</code>:</strong> Used to compare elements</li></ul><p><strong>Returns:</strong> The map now sorted</p><h2 id="diff" tabindex="-1"><a class="header-anchor" href="#diff" aria-hidden="true">#</a> diff</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">diff</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">K</span><span class="token punctuation">:</span> <span class="token class-name">V</span><span class="token punctuation">}</span> other<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token class-name">K</span><span class="token punctuation">:</span> <span class="token class-name">V</span><span class="token punctuation">}</span>
</code></pre></div><p>Returns elements of the map no present in <code>other</code>.</p><ul><li><strong><code>other</code>:</strong> Other map of the same type</li></ul><p><strong>Returns:</strong> Difference with <code>other</code></p><h2 id="intersect" tabindex="-1"><a class="header-anchor" href="#intersect" aria-hidden="true">#</a> intersect</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">intersect</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">K</span><span class="token punctuation">:</span> <span class="token class-name">V</span><span class="token punctuation">}</span> other<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token class-name">K</span><span class="token punctuation">:</span> <span class="token class-name">V</span><span class="token punctuation">}</span>
</code></pre></div><p>Returns elements present in both current map and <code>other</code>.</p><ul><li><strong><code>other</code>:</strong> Other map of the same type</li></ul><p><strong>Returns:</strong> Intersection with <code>other</code></p>`,52),o=[p];function c(l,u){return n(),s("div",null,o)}const i=a(t,[["render",c],["__file","maps.html.vue"]]);export{i as default};
