import{_ as n,o as s,c as a,a as t}from"./app-f11d2911.js";const o={},p=t(`<h1 id="null-safety" tabindex="-1"><a class="header-anchor" href="#null-safety" aria-hidden="true">#</a> Null safety</h1><p>Null safety prevents errors that result from unintentional access of variables set to <code>null</code>. buzz will require you to declare any nullable value with a <code>?</code>.</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">const</span> aStringOrNull<span class="token punctuation">:</span> <span class="token keyword">str</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">;</span>
</code></pre></div><p>It&#39;ll also require you to check for <code>null</code> before accessing the value. This reduces greatly any runtime error related to nullable values. The language provides some useful tools to do so with minimal effort.</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token comment">// Null coalescing operator is \`??\`</span>
<span class="token keyword">const</span> unwrapped<span class="token punctuation">:</span> <span class="token keyword">str</span> <span class="token operator">=</span> aStringOrNull <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;default value&quot;</span></span>

<span class="token comment">// Force unwrapping with \`!\`</span>
<span class="token keyword">const</span> unwrapped<span class="token punctuation">:</span> <span class="token keyword">str</span> <span class="token operator">=</span> aStringOrNull<span class="token operator">!</span><span class="token punctuation">;</span>

<span class="token comment">// Graceful unwrapping</span>
<span class="token keyword">const</span> optList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">int</span><span class="token punctuation">]</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token null constant">null</span><span class="token punctuation">;</span>

std<span class="token punctuation">\\</span><span class="token function">print</span><span class="token punctuation">(</span>optList<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -&gt; null</span>

<span class="token comment">// If unwrap</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>aStringOrNull <span class="token operator">-&gt;</span> aString<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token punctuation">\\</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation">{aString}</span><span class="token string"> is not null&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    std<span class="token punctuation">\\</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;aString was null&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,5),e=[p];function l(c,u){return s(),a("div",null,e)}const i=n(o,[["render",l],["__file","null-safety.html.vue"]]);export{i as default};
