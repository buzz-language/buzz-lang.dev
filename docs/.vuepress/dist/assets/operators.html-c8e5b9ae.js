import{_ as o,r as c,o as l,c as r,b as t,d as n,e as s,w as e,a as p}from"./app-2d0ae98a.js";const u={},i=p(`<h1 id="operators" tabindex="-1"><a class="header-anchor" href="#operators" aria-hidden="true">#</a> Operators</h1><h2 id="comparison" tabindex="-1"><a class="header-anchor" href="#comparison" aria-hidden="true">#</a> Comparison</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token string-literal"><span class="token string">&quot;hello&quot;</span></span> <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">;</span>
<span class="token number">12</span> <span class="token operator">!=</span> <span class="token number">13</span><span class="token punctuation">;</span>
<span class="token number">12</span> <span class="token operator">&gt;=</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token number">12</span> <span class="token operator">&lt;=</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token number">12</span> <span class="token operator">&gt;</span> <span class="token number">11</span><span class="token punctuation">;</span>
<span class="token number">12</span> <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span>
</code></pre></div><p><code>int</code> and <code>float</code> can be compared with one another.</p><h2 id="arithmetic" tabindex="-1"><a class="header-anchor" href="#arithmetic" aria-hidden="true">#</a> Arithmetic</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token number">12</span> <span class="token operator">+</span> <span class="token number">12</span> <span class="token operator">==</span> <span class="token number">24</span><span class="token punctuation">;</span>
<span class="token number">12</span> <span class="token operator">-</span> <span class="token number">12</span> <span class="token operator">==</span> <span class="token number">0;</span>
<span class="token number">12</span> <span class="token operator">*</span> <span class="token number">12</span> <span class="token operator">==</span> <span class="token number">144</span><span class="token punctuation">;</span>
<span class="token number">12</span> <span class="token operator">/</span> <span class="token number">12</span> <span class="token operator">==</span> <span class="token number">1;</span>
<span class="token number">12</span> <span class="token operator">%</span> <span class="token number">12</span> <span class="token operator">==</span> <span class="token number">0;</span>
</code></pre></div><p>Arithmetic operators are allowed between numbers of the same type.</p><h2 id="logical" tabindex="-1"><a class="header-anchor" href="#logical" aria-hidden="true">#</a> Logical</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token number">12</span> <span class="token operator">&gt;</span> <span class="token number">3 </span><span class="token keyword">and</span> <span class="token number">5 </span><span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token number">12</span> <span class="token operator">&gt;</span> <span class="token number">3 </span><span class="token keyword">or</span> <span class="token number">12</span> <span class="token operator">&lt;</span> <span class="token number">5;</span>
</code></pre></div><h2 id="concatenation" tabindex="-1"><a class="header-anchor" href="#concatenation" aria-hidden="true">#</a> Concatenation</h2><p>The <code>+</code> operator can also be used to concatenate strings, lists or maps (of the same type).</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token string-literal"><span class="token string">&quot;hello &quot;</span></span> <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&quot;world&quot;</span></span> <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;hello world&quot;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">[</span> <span class="token number">1,2</span><span class="token punctuation">,</span><span class="token number">3 </span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span> <span class="token number">3,</span> <span class="token number">4,</span> <span class="token number">5]</span>      <span class="token comment">| -&gt; [ 1, 2, 3, 4, 5 ]</span>
<span class="token punctuation">{</span> <span class="token string-literal"><span class="token string">&quot;one&quot;</span></span><span class="token punctuation">:</span> <span class="token number">1 </span><span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token punctuation">{</span> <span class="token string-literal"><span class="token string">&quot;two&quot;</span></span><span class="token punctuation">:</span> <span class="token number">2 </span><span class="token punctuation">}</span> <span class="token comment">| -&gt; { &quot;one&quot;: 1, &quot;two&quot;: 2 }</span>
</code></pre></div><h2 id="bitwise" tabindex="-1"><a class="header-anchor" href="#bitwise" aria-hidden="true">#</a> Bitwise</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token number">15</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3 </span><span class="token operator">==</span> <span class="token number">120</span><span class="token punctuation">;</span> <span class="token comment">| shift left</span>
<span class="token number">15</span> <span class="token operator">&gt;&gt;</span> <span class="token number">3 </span><span class="token operator">==</span> <span class="token number">1;</span>   <span class="token comment">| shift right</span>
<span class="token number">12</span> <span class="token operator">&amp;</span> <span class="token number">23</span> <span class="token operator">==</span> <span class="token number">4 </span>   <span class="token comment">| and</span>
<span class="token number">15</span> <span class="token operator">^</span> <span class="token number">3 </span><span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">;</span>   <span class="token comment">| xor</span>
<span class="token number">15</span> <span class="token operator">\\</span> <span class="token number">3 </span><span class="token operator">==</span> <span class="token number">15</span><span class="token punctuation">;</span>   <span class="token comment">| or</span>
<span class="token operator">~</span><span class="token number">15</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">;</span>     <span class="token comment">| not</span>
</code></pre></div><h2 id="null-safety" tabindex="-1"><a class="header-anchor" href="#null-safety" aria-hidden="true">#</a> Null safety</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code>mightBeNull <span class="token operator">??</span> defaultValue<span class="token punctuation">;</span> <span class="token comment">| Will result in \`defaultValue\` if \`mightBeNull\` is null</span>
</code></pre></div>`,16),k=p('<h2 id="downcasting-and-any-unwrapping" tabindex="-1"><a class="header-anchor" href="#downcasting-and-any-unwrapping" aria-hidden="true">#</a> Downcasting and <code>any</code> unwrapping</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code>something <span class="token keyword">is</span> <span class="token keyword">str</span><span class="token punctuation">;</span>  <span class="token comment">| true if `something` is of type `str`</span>\nsomething <span class="token keyword">as</span><span class="token operator">?</span> <span class="token keyword">int</span><span class="token punctuation">;</span> <span class="token comment">| if `something` is not an `int`, will result in a `null`</span>\n</code></pre></div>',2),d=t("code",null,"any",-1);function m(b,h){const a=c("RouterLink");return l(),r("div",null,[i,t("p",null,[n("See "),s(a,{to:"/guide/null-safety.html"},{default:e(()=>[n("Null safety")]),_:1}),n(".")]),k,t("p",null,[n("See "),s(a,{to:"/guide/null-safety.html"},{default:e(()=>[n("Null safety")]),_:1}),n(", "),s(a,{to:"/guide/types-and-variables.html#any"},{default:e(()=>[d,n(" type")]),_:1}),n(".")])])}const z=o(u,[["render",m],["__file","operators.html.vue"]]);export{z as default};
