import{_ as s,o as a,c as n,a as e}from"./app-237bf93c.js";const t={},o=e(`<h1 id="os" tabindex="-1"><a class="header-anchor" href="#os" aria-hidden="true">#</a> os</h1><h2 id="sleep" tabindex="-1"><a class="header-anchor" href="#sleep" aria-hidden="true">#</a> sleep</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">float</span> ms<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> 
</code></pre></div><p>Wait for the given amount of milliseconds</p><ul><li><strong><code>ms</code>:</strong> amount of milliseconds to wait</li></ul><h2 id="time" tabindex="-1"><a class="header-anchor" href="#time" aria-hidden="true">#</a> time</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">float</span> 
</code></pre></div><p><strong>Returns:</strong> epoch time in ms</p><h2 id="env" tabindex="-1"><a class="header-anchor" href="#env" aria-hidden="true">#</a> env</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token keyword">str</span> key<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">str</span><span class="token operator">?</span>
</code></pre></div><p>Returns environment variable under <code>key</code></p><ul><li><strong><code>key</code>:</strong> environment variable name</li></ul><h2 id="tmpdir" tabindex="-1"><a class="header-anchor" href="#tmpdir" aria-hidden="true">#</a> tmpDir</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">tmpDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">str</span> 
</code></pre></div><p><strong>Returns:</strong> path to system temp directory</p><h2 id="tmpfilename" tabindex="-1"><a class="header-anchor" href="#tmpfilename" aria-hidden="true">#</a> tmpFilename</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">tmpFilename</span><span class="token punctuation">(</span><span class="token keyword">str</span><span class="token operator">?</span> prefix<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">str</span> 
</code></pre></div><ul><li><strong><code>prefix</code>:</strong> prefix to the temp file name</li></ul><p><strong>Returns:</strong> a temporary file name in system tmp dir</p><h2 id="exit" tabindex="-1"><a class="header-anchor" href="#exit" aria-hidden="true">#</a> exit</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token keyword">int</span> exitCode<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> 
</code></pre></div><p>Exit program with <code>exitCode</code></p><ul><li><strong><code>exitCode</code>:</strong> exit code</li></ul><h2 id="execute" tabindex="-1"><a class="header-anchor" href="#execute" aria-hidden="true">#</a> execute</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">str</span><span class="token punctuation">]</span> command<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">int</span> <span class="token operator">!&gt;</span> <span class="token class-name">FileSystemError</span><span class="token punctuation">,</span> <span class="token class-name">UnexpectedError</span> 
</code></pre></div><p>Execute command and return its exit code</p><ul><li><strong><code>command</code>:</strong> command to execute</li></ul><p><strong>Returns:</strong> exit code of the command</p><h2 id="socketprotocol" tabindex="-1"><a class="header-anchor" href="#socketprotocol" aria-hidden="true">#</a> SocketProtocol</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">enum</span> <span class="token class-name">SocketProtocol</span> <span class="token punctuation">{</span>
    tcp<span class="token punctuation">,</span>
    udp<span class="token punctuation">,</span>
    ipc<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Protocols supported over a socket</p><h2 id="socket" tabindex="-1"><a class="header-anchor" href="#socket" aria-hidden="true">#</a> Socket</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">object</span> <span class="token class-name">Socket</span> 
</code></pre></div><p>A socket</p><h3 id="connect" tabindex="-1"><a class="header-anchor" href="#connect" aria-hidden="true">#</a> connect</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">static</span> <span class="token keyword">fun</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">str</span> address<span class="token punctuation">,</span> <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">0,</span> <span class="token class-name">SocketProtocol</span> netProtocol<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token class-name">Socket</span> <span class="token operator">!&gt;</span> <span class="token class-name">InvalidArgumentError</span><span class="token punctuation">,</span> <span class="token class-name">SocketError</span><span class="token punctuation">,</span> <span class="token class-name">NotYetImplementedError</span>
</code></pre></div><p>Opens a socket</p><ul><li><strong><code>address</code>:</strong> A string containing either a IPv4, IPv6 or path to a socket file (IPC)</li><li><strong><code>port</code>:</strong> Port to which to connect</li><li><strong><code>protocol</code>:</strong> Protocol to use</li></ul><p><strong>Returns:</strong> A new <code>Socket</code> opened and ready to use</p><h3 id="close" tabindex="-1"><a class="header-anchor" href="#close" aria-hidden="true">#</a> close</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span>
</code></pre></div><p>Close the socket</p><h3 id="receive" tabindex="-1"><a class="header-anchor" href="#receive" aria-hidden="true">#</a> receive</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">str</span><span class="token operator">?</span> <span class="token operator">!&gt;</span> <span class="token class-name">InvalidArgumentError</span><span class="token punctuation">,</span> <span class="token class-name">FileSystemError</span><span class="token punctuation">,</span> <span class="token class-name">ReadWriteError</span><span class="token punctuation">,</span> <span class="token class-name">UnexpectedError</span>
</code></pre></div><p>Receive at most <code>n</code> bytes from the socket</p><ul><li><strong><code>n</code>:</strong> How many bytes we&#39;re prepare to receive</li></ul><p><strong>Returns:</strong> The bytes received or null if nothing to read</p><h3 id="receiveline" tabindex="-1"><a class="header-anchor" href="#receiveline" aria-hidden="true">#</a> receiveLine</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">receiveLine</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">?</span> maxSize<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">str</span><span class="token operator">?</span> <span class="token operator">!&gt;</span> <span class="token class-name">FileSystemError</span><span class="token punctuation">,</span> <span class="token class-name">UnexpectedError</span><span class="token punctuation">,</span> <span class="token class-name">ReadWriteError</span>
</code></pre></div><p>Receive from socket until it&#39;s closed or a linefeed is received</p><p><strong>Returns:</strong> The bytes received or null if nothing to read</p><h3 id="receiveall" tabindex="-1"><a class="header-anchor" href="#receiveall" aria-hidden="true">#</a> receiveAll</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">receiveAll</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">?</span> maxSize<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">str</span><span class="token operator">?</span> <span class="token operator">!&gt;</span> <span class="token class-name">FileSystemError</span><span class="token punctuation">,</span> <span class="token class-name">UnexpectedError</span><span class="token punctuation">,</span> <span class="token class-name">ReadWriteError</span>
</code></pre></div><p>Receive from socket until it&#39;s closed</p><p><strong>Returns:</strong> The bytes received or null if nothing to read</p><h3 id="send" tabindex="-1"><a class="header-anchor" href="#send" aria-hidden="true">#</a> send</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">str</span> bytes<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token operator">!&gt;</span> <span class="token class-name">FileSystemError</span><span class="token punctuation">,</span> <span class="token class-name">ReadWriteError</span><span class="token punctuation">,</span> <span class="token class-name">UnexpectedError</span>
</code></pre></div><p>Send bytes on the socket</p><ul><li><strong><code>bytes</code>:</strong> Bytes to send</li></ul><h2 id="tcpserver" tabindex="-1"><a class="header-anchor" href="#tcpserver" aria-hidden="true">#</a> TcpServer</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">object</span> <span class="token class-name">TcpServer</span> 
</code></pre></div><p>A TCP Server</p><h3 id="init" tabindex="-1"><a class="header-anchor" href="#init" aria-hidden="true">#</a> init</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">static</span> <span class="token keyword">fun</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">str</span> address<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">bool</span> reuseAddr<span class="token punctuation">,</span> <span class="token keyword">bool</span> reusePort<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token class-name">TcpServer</span> <span class="token operator">!&gt;</span> <span class="token class-name">SocketError</span><span class="token punctuation">,</span> <span class="token class-name">UnexpectedError</span><span class="token punctuation">,</span> <span class="token class-name">InvalidArgumentError</span><span class="token punctuation">,</span> <span class="token class-name">FileSystemError</span>
</code></pre></div><p>Starts a TCP server</p><ul><li><strong><code>address</code>:</strong> Address to listen on</li><li><strong><code>port</code>:</strong> Port to listen on</li><li><strong><code>reuseAddr</code>:</strong> Wether we want to accept multiple connections</li><li><strong><code>reusePort</code>:</strong> Wether we want to accept multiple connections</li></ul><p><strong>Returns:</strong> New <code>TcpServer</code> bound to <code>&lt;address&gt;:&lt;port&gt;</code></p><h3 id="accept" tabindex="-1"><a class="header-anchor" href="#accept" aria-hidden="true">#</a> accept</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token class-name">Socket</span> <span class="token operator">!&gt;</span> <span class="token class-name">SocketError</span><span class="token punctuation">,</span> <span class="token class-name">UnexpectedError</span>
</code></pre></div><p>Accept a new connection</p><p><strong>Returns:</strong> Socket opened with the client</p><h3 id="close-1" tabindex="-1"><a class="header-anchor" href="#close-1" aria-hidden="true">#</a> close</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span>
</code></pre></div><p>Close server</p>`,74),p=[o];function c(r,l){return a(),n("div",null,p)}const i=s(t,[["render",c],["__file","os.html.vue"]]);export{i as default};
