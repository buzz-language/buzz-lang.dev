import{_ as a,o as s,c as n,a as t}from"./app-2d0ae98a.js";const e={},c=t(`<h1 id="patterns" tabindex="-1"><a class="header-anchor" href="#patterns" aria-hidden="true">#</a> Patterns</h1><h2 id="match" tabindex="-1"><a class="header-anchor" href="#match" aria-hidden="true">#</a> match</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token keyword">str</span> subject<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token keyword">str</span><span class="token punctuation">]</span><span class="token operator">?</span>
</code></pre></div><p>Get first match of the pattern against a string</p><ul><li><strong><code>subject</code></strong>: Subject to match the pattern against</li></ul><p><strong>Returns:</strong> List of match and captures or <code>null</code> if nothing matches</p><h2 id="matchall" tabindex="-1"><a class="header-anchor" href="#matchall" aria-hidden="true">#</a> matchAll</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">matchAll</span><span class="token punctuation">(</span><span class="token keyword">str</span> subject<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token keyword">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">?</span>
</code></pre></div><p>Get all matches of the pattern against a string</p><ul><li><strong><code>subject</code></strong>: Subject to match the pattern against</li></ul><p><strong>Returns:</strong> List of matches or <code>null</code> if nothing matches</p><h2 id="replace" tabindex="-1"><a class="header-anchor" href="#replace" aria-hidden="true">#</a> replace</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">str</span> subject<span class="token punctuation">,</span> <span class="token keyword">str</span> with<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">str</span>
</code></pre></div><p>Replace first occurence of the pattern</p><ul><li><strong><code>subject</code></strong>: Subject to match the pattern against</li><li><strong><code>with</code></strong>: Replacement</li></ul><p><strong>Returns:</strong> New string</p><h2 id="replaceall" tabindex="-1"><a class="header-anchor" href="#replaceall" aria-hidden="true">#</a> replaceAll</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token keyword">str</span> subject<span class="token punctuation">,</span> <span class="token keyword">str</span> with<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">str</span>
</code></pre></div><p>Replace all occurence of the pattern</p><ul><li><strong><code>subject</code></strong>: Subject to match the pattern against</li><li><strong><code>with</code></strong>: Replacement</li></ul><p><strong>Returns:</strong> New string</p>`,21),o=[c];function p(r,l){return s(),n("div",null,o)}const i=a(e,[["render",p],["__file","patterns.html.vue"]]);export{i as default};
