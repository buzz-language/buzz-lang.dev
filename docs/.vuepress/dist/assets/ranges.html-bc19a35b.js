import{_ as n,o as a,c as s,a as e}from"./app-30a05bfa.js";const t={},o=e(`<h1 id="ranges" tabindex="-1"><a class="header-anchor" href="#ranges" aria-hidden="true">#</a> Ranges</h1><h2 id="tolist" tabindex="-1"><a class="header-anchor" href="#tolist" aria-hidden="true">#</a> toList</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token keyword">int</span><span class="token punctuation">]</span>
</code></pre></div><p><strong>Returns:</strong> A list containing the sequence of integers of that range</p><h2 id="len" tabindex="-1"><a class="header-anchor" href="#len" aria-hidden="true">#</a> len</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">int</span>
</code></pre></div><p><strong>Returns:</strong> How many integers there is in that range</p><h2 id="invert" tabindex="-1"><a class="header-anchor" href="#invert" aria-hidden="true">#</a> invert</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">invert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">rg</span>
</code></pre></div><p><strong>Returns:</strong> A new range with its boundaries inverted</p><h2 id="subsetof" tabindex="-1"><a class="header-anchor" href="#subsetof" aria-hidden="true">#</a> subsetOf</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">subsetOf</span><span class="token punctuation">(</span>other<span class="token punctuation">:</span> <span class="token keyword">rg</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">bool</span>
</code></pre></div><ul><li><strong><code>other</code></strong>: Other range to compare it to</li></ul><p><strong>Returns:</strong> <code>true</code> if the range is a subset of the <code>other</code> range</p><h2 id="intersect" tabindex="-1"><a class="header-anchor" href="#intersect" aria-hidden="true">#</a> intersect</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">intersect</span><span class="token punctuation">(</span>other<span class="token punctuation">:</span> <span class="token keyword">rg</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">bool</span>
</code></pre></div><ul><li><strong><code>other</code></strong>: Range to intersect it with</li></ul><p><strong>Returns:</strong> A new range which is the intersection of the two ranges</p><h2 id="union" tabindex="-1"><a class="header-anchor" href="#union" aria-hidden="true">#</a> union</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">union</span><span class="token punctuation">(</span>other<span class="token punctuation">:</span> <span class="token keyword">rg</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">bool</span>
</code></pre></div><ul><li><strong><code>other</code></strong>: Range to union it with</li></ul><p><strong>Returns:</strong> A new range which is the union of the two ranges</p><h2 id="high" tabindex="-1"><a class="header-anchor" href="#high" aria-hidden="true">#</a> high</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">high</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">int</span>
</code></pre></div><p><strong>Returns:</strong> The high bound of the range</p><h2 id="low" tabindex="-1"><a class="header-anchor" href="#low" aria-hidden="true">#</a> low</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">low</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">int</span>
</code></pre></div><p><strong>Returns:</strong> The low bound of the range</p>`,28),r=[o];function p(c,i){return a(),s("div",null,r)}const l=n(t,[["render",p],["__file","ranges.html.vue"]]);export{l as default};
