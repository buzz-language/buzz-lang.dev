import{_ as a,o as n,c as s,a as e}from"./app-f625b690.js";const t={},o=e(`<h1 id="std" tabindex="-1"><a class="header-anchor" href="#std" aria-hidden="true">#</a> std</h1><h2 id="assert" tabindex="-1"><a class="header-anchor" href="#assert" aria-hidden="true">#</a> assert</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token keyword">bool</span> condition<span class="token punctuation">,</span> <span class="token keyword">str</span> message<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> 
</code></pre></div><p>If condition is false print message and exit program</p><ul><li><strong><code>message</code>:</strong> message printed if <code>condition</code> is false</li></ul><h2 id="print" tabindex="-1"><a class="header-anchor" href="#print" aria-hidden="true">#</a> print</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">str</span> value<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">void</span> 
</code></pre></div><p>Prints value on stdout</p><ul><li><strong><code>value</code>:</strong> value to print</li></ul><h2 id="parseint" tabindex="-1"><a class="header-anchor" href="#parseint" aria-hidden="true">#</a> parseInt</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">str</span> string<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">int</span><span class="token operator">?</span> 
</code></pre></div><p>Parse number, returns false if string does not represent a number</p><ul><li><strong><code>string</code>:</strong> string to parse</li></ul><p><strong>Returns:</strong> integer parsed or null</p><h2 id="parsefloat" tabindex="-1"><a class="header-anchor" href="#parsefloat" aria-hidden="true">#</a> parseFloat</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token keyword">str</span> string<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">float</span><span class="token operator">?</span> 
</code></pre></div><p>Parse number, returns false if string does not represent a number</p><ul><li><strong><code>string</code>:</strong> string to parse</li></ul><p><strong>Returns:</strong> float parsed or null</p><h2 id="toint" tabindex="-1"><a class="header-anchor" href="#toint" aria-hidden="true">#</a> toInt</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">toInt</span><span class="token punctuation">(</span><span class="token keyword">float</span> n<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">int</span> 
</code></pre></div><p>Cast integer to a float value</p><ul><li><strong><code>n</code>:</strong> value to cast</li></ul><p><strong>Returns:</strong> casted value</p><h2 id="tofloat" tabindex="-1"><a class="header-anchor" href="#tofloat" aria-hidden="true">#</a> toFloat</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">toFloat</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">float</span> 
</code></pre></div><p>Cast float to a integer value</p><ul><li><strong><code>n</code>:</strong> value to cast</li></ul><p><strong>Returns:</strong> casted value</p><h2 id="char" tabindex="-1"><a class="header-anchor" href="#char" aria-hidden="true">#</a> char</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">char</span><span class="token punctuation">(</span><span class="token keyword">int</span> byte<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">str</span> 
</code></pre></div><p>Return ascii char for given byte</p><h2 id="random" tabindex="-1"><a class="header-anchor" href="#random" aria-hidden="true">#</a> random</h2><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">fun</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">?</span> min <span class="token operator">=</span> <span class="token null constant">null</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">?</span> max <span class="token operator">=</span> <span class="token null constant">null</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">int</span>
</code></pre></div><p>Return evenly distributed random number between <code>min</code> and <code>max</code></p><ul><li><strong><code>min</code></strong>: Minimum value, if omitted <code>0</code></li><li><strong><code>max</code></strong>: Maximum value, if omitted <code>min + 1</code></li></ul><p><strong>Returns:</strong> Random value</p>`,37),p=[o];function r(c,l){return n(),s("div",null,p)}const i=a(t,[["render",r],["__file","std.html.vue"]]);export{i as default};
