import{_ as c,r as l,o as u,c as i,b as n,d as e,e as s,w as t,a as o}from"./app-02bc016f.js";const r={},d=o(`<h1 id="syntax" tabindex="-1"><a class="header-anchor" href="#syntax" aria-hidden="true">#</a> Syntax</h1><h2 id="comments" tabindex="-1"><a class="header-anchor" href="#comments" aria-hidden="true">#</a> Comments</h2><p>Comments are any text following a <code>|</code> up until a new line.</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token comment">| A comment</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Comment ended with a new line&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="variables-and-identifiers" tabindex="-1"><a class="header-anchor" href="#variables-and-identifiers" aria-hidden="true">#</a> Variables and identifiers</h2><p>A variable declaration is a type followed by an identifier and an initial value;</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">str</span> hello <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">;</span>
</code></pre></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>buzz rarely infers types. This is a conscious choice of buzz which claims to be <strong>unambiguous</strong>.</p></div>`,8),h={href:"https://github.com/buzz-language/buzz/issues/138",target:"_blank",rel:"noopener noreferrer"},k=o(`<div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">str</span> helloWorld2 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;valid&quot;</span></span><span class="token punctuation">;</span>

<span class="token keyword">str</span> hello_world <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;invalid&quot;</span></span><span class="token punctuation">;</span>
</code></pre></div><h3 id="constants" tabindex="-1"><a class="header-anchor" href="#constants" aria-hidden="true">#</a> Constants</h3><p>A constant is prefixed with the <code>const</code> keyword. It means the variable can&#39;t change.</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">const</span> <span class="token keyword">str</span> hello <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">;</span>

hello <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;bye&quot;</span></span><span class="token punctuation">;</span> <span class="token comment">| Not allowed</span>
</code></pre></div><p>Objects, list and maps variables are only reference to them. Meaning you can&#39;t assign a new list to a constant variable but you can modify the list itself.</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token keyword">int</span><span class="token punctuation">]</span> list <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1,</span> <span class="token number">2,</span> <span class="token number">3 </span><span class="token punctuation">]</span><span class="token punctuation">;</span>

list <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">4,</span> <span class="token number">5,</span> <span class="token number">6 </span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">| Not allowed</span>
list<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">| Allowed</span>
</code></pre></div><h2 id="operators" tabindex="-1"><a class="header-anchor" href="#operators" aria-hidden="true">#</a> Operators</h2><h3 id="comparison" tabindex="-1"><a class="header-anchor" href="#comparison" aria-hidden="true">#</a> Comparison</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token string-literal"><span class="token string">&quot;hello&quot;</span></span> <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">;</span>
<span class="token number">12</span> <span class="token operator">!=</span> <span class="token number">13</span><span class="token punctuation">;</span>
<span class="token number">12</span> <span class="token operator">&gt;=</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token number">12</span> <span class="token operator">&lt;=</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token number">12</span> <span class="token operator">&gt;</span> <span class="token number">11</span><span class="token punctuation">;</span>
<span class="token number">12</span> <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span>
</code></pre></div><p><code>int</code> and <code>float</code> can be compared with one another.</p><h3 id="arithmetic" tabindex="-1"><a class="header-anchor" href="#arithmetic" aria-hidden="true">#</a> Arithmetic</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token number">12</span> <span class="token operator">+</span> <span class="token number">12</span> <span class="token operator">==</span> <span class="token number">24</span><span class="token punctuation">;</span>
<span class="token number">12</span> <span class="token operator">-</span> <span class="token number">12</span> <span class="token operator">==</span> <span class="token number">0;</span>
<span class="token number">12</span> <span class="token operator">*</span> <span class="token number">12</span> <span class="token operator">==</span> <span class="token number">144</span><span class="token punctuation">;</span>
<span class="token number">12</span> <span class="token operator">/</span> <span class="token number">12</span> <span class="token operator">==</span> <span class="token number">1;</span>
<span class="token number">12</span> <span class="token operator">%</span> <span class="token number">12</span> <span class="token operator">==</span> <span class="token number">0;</span>
</code></pre></div><p>Arithmetic operators are allowed between numbers of the same type.</p><h3 id="logical" tabindex="-1"><a class="header-anchor" href="#logical" aria-hidden="true">#</a> Logical</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token number">12</span> <span class="token operator">&gt;</span> <span class="token number">3 </span><span class="token keyword">and</span> <span class="token number">5 </span><span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token number">12</span> <span class="token operator">&gt;</span> <span class="token number">3 </span><span class="token keyword">or</span> <span class="token number">12</span> <span class="token operator">&lt;</span> <span class="token number">5;</span>
</code></pre></div><h3 id="concatenation" tabindex="-1"><a class="header-anchor" href="#concatenation" aria-hidden="true">#</a> Concatenation</h3><p>The <code>+</code> operator can also be used to concatenate strings, lists or maps (of the same type).</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token string-literal"><span class="token string">&quot;hello &quot;</span></span> <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&quot;world&quot;</span></span> <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;hello world&quot;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">[</span> <span class="token number">1,2</span><span class="token punctuation">,</span><span class="token number">3 </span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span> <span class="token number">3,</span> <span class="token number">4,</span> <span class="token number">5]</span>      <span class="token comment">| -&gt; [ 1, 2, 3, 4, 5 ]</span>
<span class="token punctuation">{</span> <span class="token string-literal"><span class="token string">&quot;one&quot;</span></span><span class="token punctuation">:</span> <span class="token number">1 </span><span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token punctuation">{</span> <span class="token string-literal"><span class="token string">&quot;two&quot;</span></span><span class="token punctuation">:</span> <span class="token number">2 </span><span class="token punctuation">}</span> <span class="token comment">| -&gt; { &quot;one&quot;: 1, &quot;two&quot;: 2 }</span>
</code></pre></div><h3 id="bitwise" tabindex="-1"><a class="header-anchor" href="#bitwise" aria-hidden="true">#</a> Bitwise</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token number">15</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3 </span><span class="token operator">==</span> <span class="token number">120</span><span class="token punctuation">;</span> <span class="token comment">| shift left</span>
<span class="token number">15</span> <span class="token operator">&gt;&gt;</span> <span class="token number">3 </span><span class="token operator">==</span> <span class="token number">1;</span>   <span class="token comment">| shift right</span>
<span class="token number">12</span> <span class="token operator">&amp;</span> <span class="token number">23</span> <span class="token operator">==</span> <span class="token number">4 </span>   <span class="token comment">| and</span>
<span class="token number">15</span> <span class="token operator">^</span> <span class="token number">3 </span><span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">;</span>   <span class="token comment">| xor</span>
<span class="token number">15</span> <span class="token operator">\\</span> <span class="token number">3 </span><span class="token operator">==</span> <span class="token number">15</span><span class="token punctuation">;</span>   <span class="token comment">| or</span>
<span class="token operator">~</span><span class="token number">15</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">;</span>     <span class="token comment">| not</span>
</code></pre></div><h3 id="null-safety" tabindex="-1"><a class="header-anchor" href="#null-safety" aria-hidden="true">#</a> Null safety</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code>mightBeNull <span class="token operator">??</span> defaultValue<span class="token punctuation">;</span> <span class="token comment">| Will result in \`defaultValue\` if \`mightBeNull\` is null</span>
</code></pre></div>`,22),m=o('<h3 id="downcasting-and-any-unwrapping" tabindex="-1"><a class="header-anchor" href="#downcasting-and-any-unwrapping" aria-hidden="true">#</a> Downcasting and <code>any</code> unwrapping</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code>something <span class="token keyword">is</span> <span class="token keyword">str</span><span class="token punctuation">;</span>  <span class="token comment">| true if `something` is of type `str`</span>\nsomething <span class="token keyword">as</span><span class="token operator">?</span> <span class="token keyword">int</span><span class="token punctuation">;</span> <span class="token comment">| if `something` is not an `int`, will result in a `null`</span>\n</code></pre></div>',2),_=n("code",null,"any",-1),b=n("h2",{id:"keywords",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#keywords","aria-hidden":"true"},"#"),e(" Keywords")],-1),g=n("p",null,"Here's the exhaustive list of buzz's keywords:",-1),f=n("code",null,"and",-1),z=n("code",null,"any",-1),y=n("code",null,"as",-1),w=n("code",null,"band",-1),x=n("code",null,"bool",-1),v=n("code",null,"bor",-1),q=n("code",null,"break",-1),N=n("code",null,"catch",-1),C=n("code",null,"const",-1),j=n("code",null,"continue",-1),A=n("code",null,"do",-1),V=n("code",null,"else",-1),B=n("code",null,"enum",-1),L=n("code",null,"export",-1),I=n("code",null,"extern",-1),S=n("code",null,"false",-1),T=n("code",null,"fib",-1),E=n("code",null,"float",-1),K=n("code",null,"for",-1),O=n("code",null,"foreach",-1),R=n("code",null,"from",-1),W=n("code",null,"fun",-1),D=n("code",null,"if",-1),H=n("code",null,"import",-1),M=n("code",null,"in",-1),P=n("code",null,"int",-1),F=n("code",null,"is",-1),G=n("code",null,"null",-1),J=n("code",null,"obj",-1),Q=n("code",null,"object",-1),U=n("code",null,"or",-1),X=n("code",null,"pat",-1),Y=n("code",null,"protocol",-1),Z=n("code",null,"resolve",-1),$=n("code",null,"resume",-1),nn=n("code",null,"return",-1),sn=n("code",null,"static",-1),an=n("code",null,"str",-1),tn=n("code",null,"test",-1),en=n("code",null,"this",-1),on=n("code",null,"throw",-1),ln=n("code",null,"true",-1),pn=n("code",null,"try",-1),cn=n("code",null,"ud",-1),un=n("code",null,"until",-1),rn=n("code",null,"void",-1),dn=n("code",null,"while",-1),hn=n("code",null,"xor",-1),kn=n("code",null,"yield",-1);function mn(_n,bn){const p=l("ExternalLinkIcon"),a=l("RouterLink");return u(),i("div",null,[d,n("p",null,[e("An identifier must start with a letter and can consist of letters and numbers only. Keywords can't be used (until "),n("a",h,[e("#138"),s(p)]),e(" is implemented).")]),k,n("p",null,[e("See "),s(a,{to:"/guide/null-safety.html"},{default:t(()=>[e("Null safety")]),_:1}),e(".")]),m,n("p",null,[e("See "),s(a,{to:"/guide/null-safety.html"},{default:t(()=>[e("Null safety")]),_:1}),e(", "),s(a,{to:"/guide/types.html#any"},{default:t(()=>[_,e(" type")]),_:1}),e(".")]),b,g,n("ul",null,[n("li",null,[s(a,{to:"/guide/syntax.html#logical"},{default:t(()=>[f]),_:1})]),n("li",null,[s(a,{to:"/guide/types.html#any"},{default:t(()=>[z]),_:1})]),n("li",null,[s(a,{to:"/guide/control-flow.html#if"},{default:t(()=>[y]),_:1})]),n("li",null,[s(a,{to:"/guide/syntax.html#bitwise"},{default:t(()=>[w]),_:1})]),n("li",null,[s(a,{to:"/guide/syntax.html#bitwise"},{default:t(()=>[x]),_:1})]),n("li",null,[s(a,{to:"/guide/syntax.html#bitwise"},{default:t(()=>[v]),_:1})]),n("li",null,[s(a,{to:"/guide/control-flow.html#break-and-continue"},{default:t(()=>[q]),_:1})]),n("li",null,[s(a,{to:"/guide/errors.html"},{default:t(()=>[N]),_:1})]),n("li",null,[s(a,{to:"/guide/syntax.html#constants"},{default:t(()=>[C]),_:1})]),n("li",null,[s(a,{to:"/guide/control-flow.html#break-and-continue"},{default:t(()=>[j]),_:1})]),n("li",null,[s(a,{to:"/guide/control-flow.html"},{default:t(()=>[A]),_:1})]),n("li",null,[s(a,{to:"/guide/control-flow.html"},{default:t(()=>[V]),_:1})]),n("li",null,[s(a,{to:"/guide/enums.html"},{default:t(()=>[B]),_:1})]),n("li",null,[s(a,{to:"/guide/import-export.html"},{default:t(()=>[L]),_:1})]),n("li",null,[s(a,{to:"/guide/functions.html"},{default:t(()=>[I]),_:1})]),n("li",null,[s(a,{to:"/guide/types.html#booleans"},{default:t(()=>[S]),_:1})]),n("li",null,[s(a,{to:"/guide/fibers.html"},{default:t(()=>[T]),_:1})]),n("li",null,[s(a,{to:"/guide/syntax.html#numbers"},{default:t(()=>[E]),_:1})]),n("li",null,[s(a,{to:"/guide/control-flow.html"},{default:t(()=>[K]),_:1})]),n("li",null,[s(a,{to:"/guide/control-flow.html"},{default:t(()=>[O]),_:1})]),n("li",null,[s(a,{to:"/guide/import-export.html"},{default:t(()=>[R]),_:1})]),n("li",null,[s(a,{to:"/guide/functions.html"},{default:t(()=>[W]),_:1})]),n("li",null,[s(a,{to:"/guide/control-flow.html#if"},{default:t(()=>[D]),_:1})]),n("li",null,[s(a,{to:"/guide/import-export.html"},{default:t(()=>[H]),_:1})]),n("li",null,[s(a,{to:"/guide/control-flow.html#foreach"},{default:t(()=>[M]),_:1})]),n("li",null,[s(a,{to:"/guide/syntax.html#numbers"},{default:t(()=>[P]),_:1})]),n("li",null,[s(a,{to:"/guide/syntax.html#downcasting-and-any-unwrapping"},{default:t(()=>[F]),_:1})]),n("li",null,[s(a,{to:"/guide/types.html#null-and-void"},{default:t(()=>[G]),_:1})]),n("li",null,[s(a,{to:"/guide/objects.html"},{default:t(()=>[J]),_:1})]),n("li",null,[s(a,{to:"/guide/objects.html"},{default:t(()=>[Q]),_:1})]),n("li",null,[s(a,{to:"/guide/syntax.html#logical"},{default:t(()=>[U]),_:1})]),n("li",null,[s(a,{to:"/guide/types.html#patterns"},{default:t(()=>[X]),_:1})]),n("li",null,[s(a,{to:"/guide/protocols.html"},{default:t(()=>[Y]),_:1})]),n("li",null,[s(a,{to:"/guide/fibers.html"},{default:t(()=>[Z]),_:1})]),n("li",null,[s(a,{to:"/guide/fibers.html"},{default:t(()=>[$]),_:1})]),n("li",null,[s(a,{to:"/guide/functions.html"},{default:t(()=>[nn]),_:1})]),n("li",null,[s(a,{to:"/guide/objects.html"},{default:t(()=>[sn]),_:1})]),n("li",null,[s(a,{to:"/guide/types.html#strings"},{default:t(()=>[an]),_:1})]),n("li",null,[s(a,{to:"/guide/functions.html#test"},{default:t(()=>[tn]),_:1})]),n("li",null,[s(a,{to:"/guide/objects.html"},{default:t(()=>[en]),_:1})]),n("li",null,[s(a,{to:"/guide/errors.html"},{default:t(()=>[on]),_:1})]),n("li",null,[s(a,{to:"/guide/types.html#booleans"},{default:t(()=>[ln]),_:1})]),n("li",null,[s(a,{to:"/guide/errors.html"},{default:t(()=>[pn]),_:1})]),n("li",null,[s(a,{to:"/guide/types.html#user-data"},{default:t(()=>[cn]),_:1})]),n("li",null,[s(a,{to:"/guide/control-flow.html"},{default:t(()=>[un]),_:1})]),n("li",null,[s(a,{to:"/guide/types.html#null-and-void"},{default:t(()=>[rn]),_:1})]),n("li",null,[s(a,{to:"/guide/control-flow.html"},{default:t(()=>[dn]),_:1})]),n("li",null,[s(a,{to:"/guide/syntax.html#bitwise"},{default:t(()=>[hn]),_:1})]),n("li",null,[s(a,{to:"/guide/fibers.html"},{default:t(()=>[kn]),_:1})])])])}const fn=c(r,[["render",mn],["__file","syntax.html.vue"]]);export{fn as default};
