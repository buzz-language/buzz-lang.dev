import{_ as p,b as l,o as c,c as r,e as t,f as a,k as s,l as e,a as o}from"./app-59cb0b0b.js";const u={},i=o(`<h1 id="syntax" tabindex="-1"><a class="header-anchor" href="#syntax" aria-hidden="true">#</a> Syntax</h1><h2 id="comments" tabindex="-1"><a class="header-anchor" href="#comments" aria-hidden="true">#</a> Comments</h2><p>Comments are any text following a <code>|</code> up until a new line.</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token comment">| A comment</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Comment ended with a new line&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="variables-and-identifiers" tabindex="-1"><a class="header-anchor" href="#variables-and-identifiers" aria-hidden="true">#</a> Variables and identifiers</h2><p>A variable declaration is a type or the <code>var</code> keyword, followed by an identifier and an initial value;</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">str</span> hello <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> bye <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;bye&quot;</span></span><span class="token punctuation">;</span> <span class="token comment">| Here the \`str\` type will be inferred from the initial value</span>
</code></pre></div><p>An identifier must start with a letter and can consist of letters, numbers and the <code>_</code> character.</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">str</span> helloWorld2 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;valid&quot;</span></span><span class="token punctuation">;</span>
<span class="token keyword">str</span> hello_world <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;valid too&quot;</span></span><span class="token punctuation">;</span>
</code></pre></div><p>However you can actually use anything as an identifier if you surround it with the <code>@&quot;...&quot;</code> notation.</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">str</span> <span class="token punctuation">@</span><span class="token string-literal"><span class="token string">&quot;this is valid too!&quot;</span></span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">;</span>
</code></pre></div><p>A nullable variable can omit its initial value which will automatically be <code>null</code>:</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">str</span><span class="token operator">?</span> maybe<span class="token punctuation">;</span>

<span class="token function">assert</span><span class="token punctuation">(</span>maybe <span class="token operator">==</span> <span class="token null constant">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="constants" tabindex="-1"><a class="header-anchor" href="#constants" aria-hidden="true">#</a> Constants</h3><p>A constant is prefixed with the <code>const</code> keyword. It means the variable can&#39;t change.</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">const</span> hello <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">;</span>

hello <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;bye&quot;</span></span><span class="token punctuation">;</span> <span class="token comment">| Not allowed</span>
</code></pre></div><p>Objects, list and maps variables are only reference to them. Meaning you can&#39;t assign a new list to a constant variable but you can modify the list itself.</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token keyword">int</span><span class="token punctuation">]</span> list <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1,</span> <span class="token number">2,</span> <span class="token number">3 </span><span class="token punctuation">]</span><span class="token punctuation">;</span>

list <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">4,</span> <span class="token number">5,</span> <span class="token number">6 </span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">| Not allowed</span>
list<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">| Allowed</span>
</code></pre></div><h2 id="operators" tabindex="-1"><a class="header-anchor" href="#operators" aria-hidden="true">#</a> Operators</h2><h3 id="comparison" tabindex="-1"><a class="header-anchor" href="#comparison" aria-hidden="true">#</a> Comparison</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token string-literal"><span class="token string">&quot;hello&quot;</span></span> <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">;</span>
<span class="token number">12</span> <span class="token operator">!=</span> <span class="token number">13</span><span class="token punctuation">;</span>
<span class="token number">12</span> <span class="token operator">&gt;=</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token number">12</span> <span class="token operator">&lt;=</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token number">12</span> <span class="token operator">&gt;</span> <span class="token number">11</span><span class="token punctuation">;</span>
<span class="token number">12</span> <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span>
</code></pre></div><p><code>int</code> and <code>float</code> can be compared with one another.</p><h3 id="arithmetic" tabindex="-1"><a class="header-anchor" href="#arithmetic" aria-hidden="true">#</a> Arithmetic</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token number">12</span> <span class="token operator">+</span> <span class="token number">12</span> <span class="token operator">==</span> <span class="token number">24</span><span class="token punctuation">;</span>
<span class="token number">12</span> <span class="token operator">-</span> <span class="token number">12</span> <span class="token operator">==</span> <span class="token number">0;</span>
<span class="token number">12</span> <span class="token operator">*</span> <span class="token number">12</span> <span class="token operator">==</span> <span class="token number">144</span><span class="token punctuation">;</span>
<span class="token number">12</span> <span class="token operator">/</span> <span class="token number">12</span> <span class="token operator">==</span> <span class="token number">1;</span>
<span class="token number">12</span> <span class="token operator">%</span> <span class="token number">12</span> <span class="token operator">==</span> <span class="token number">0;</span>
</code></pre></div><p>Arithmetic operators are allowed between numbers of the same type.</p><h3 id="logical" tabindex="-1"><a class="header-anchor" href="#logical" aria-hidden="true">#</a> Logical</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token number">12</span> <span class="token operator">&gt;</span> <span class="token number">3 </span><span class="token keyword">and</span> <span class="token number">5 </span><span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token number">12</span> <span class="token operator">&gt;</span> <span class="token number">3 </span><span class="token keyword">or</span> <span class="token number">12</span> <span class="token operator">&lt;</span> <span class="token number">5;</span>
</code></pre></div><h3 id="concatenation" tabindex="-1"><a class="header-anchor" href="#concatenation" aria-hidden="true">#</a> Concatenation</h3><p>The <code>+</code> operator can also be used to concatenate strings, lists or maps (of the same type).</p><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token string-literal"><span class="token string">&quot;hello &quot;</span></span> <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&quot;world&quot;</span></span> <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;hello world&quot;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">[</span> <span class="token number">1,2</span><span class="token punctuation">,</span><span class="token number">3 </span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span> <span class="token number">3,</span> <span class="token number">4,</span> <span class="token number">5]</span>      <span class="token comment">| -&gt; [ 1, 2, 3, 4, 5 ]</span>
<span class="token punctuation">{</span> <span class="token string-literal"><span class="token string">&quot;one&quot;</span></span><span class="token punctuation">:</span> <span class="token number">1 </span><span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token punctuation">{</span> <span class="token string-literal"><span class="token string">&quot;two&quot;</span></span><span class="token punctuation">:</span> <span class="token number">2 </span><span class="token punctuation">}</span> <span class="token comment">| -&gt; { &quot;one&quot;: 1, &quot;two&quot;: 2 }</span>
</code></pre></div><h3 id="bitwise" tabindex="-1"><a class="header-anchor" href="#bitwise" aria-hidden="true">#</a> Bitwise</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token number">15</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3 </span><span class="token operator">==</span> <span class="token number">120</span><span class="token punctuation">;</span> <span class="token comment">| shift left</span>
<span class="token number">15</span> <span class="token operator">&gt;&gt;</span> <span class="token number">3 </span><span class="token operator">==</span> <span class="token number">1;</span>   <span class="token comment">| shift right</span>
<span class="token number">12</span> <span class="token operator">&amp;</span> <span class="token number">23</span> <span class="token operator">==</span> <span class="token number">4 </span>   <span class="token comment">| and</span>
<span class="token number">15</span> <span class="token operator">^</span> <span class="token number">3 </span><span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">;</span>   <span class="token comment">| xor</span>
<span class="token number">15</span> <span class="token operator">\\</span> <span class="token number">3 </span><span class="token operator">==</span> <span class="token number">15</span><span class="token punctuation">;</span>   <span class="token comment">| or</span>
<span class="token operator">~</span><span class="token number">15</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">;</span>     <span class="token comment">| not</span>
</code></pre></div><h3 id="null-safety" tabindex="-1"><a class="header-anchor" href="#null-safety" aria-hidden="true">#</a> Null safety</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code>mightBeNull <span class="token operator">??</span> defaultValue<span class="token punctuation">;</span> <span class="token comment">| Will result in \`defaultValue\` if \`mightBeNull\` is null</span>
</code></pre></div>`,34),k=o('<h3 id="type-operators" tabindex="-1"><a class="header-anchor" href="#type-operators" aria-hidden="true">#</a> Type operators</h3><div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code>something <span class="token keyword">is</span> <span class="token keyword">str</span><span class="token punctuation">;</span>  <span class="token comment">| true if `something` is of type `str`</span>\nsomething <span class="token keyword">as</span><span class="token operator">?</span> <span class="token keyword">int</span><span class="token punctuation">;</span> <span class="token comment">| if `something` is not an `int`, will result in a `null`</span>\n</code></pre></div>',2),d=t("code",null,"any",-1),m=o(`<div class="language-buzz" data-ext="buzz"><pre class="language-buzz"><code><span class="token keyword">typeof</span> myList <span class="token operator">==</span> <span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token keyword">int</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">| returns type of expression</span>
</code></pre></div>`,1);function b(h,g){const n=l("RouterLink");return c(),r("div",null,[i,t("p",null,[a("See "),s(n,{to:"/guide/null-safety.html"},{default:e(()=>[a("Null safety")]),_:1}),a(".")]),k,t("p",null,[a("See "),s(n,{to:"/guide/null-safety.html"},{default:e(()=>[a("Null safety")]),_:1}),a(", "),s(n,{to:"/guide/types.html#any"},{default:e(()=>[d,a(" type")]),_:1}),a(".")]),m])}const f=p(u,[["render",b],["__file","syntax.html.vue"]]);export{f as default};
